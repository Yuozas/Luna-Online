// PackedFile.cpp: implementation of the CPackFile class.
//
//////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "PackFile.h"
#include "CoStorage.h"
#include <crtdbg.h>

#define CRYPTOR 0x55E31F9A
#define CRYPTORNAME 9
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////



DWORD GetSearchFileName(char* szDest,char* szSrc)
{
	
	GetNameRemovePath(szDest,szSrc);
	CharToSmallASCIILen(szDest,szDest);

	DWORD	dwSearchFileNameLen;
	dwSearchFileNameLen = lstrlen(szDest);

	return dwSearchFileNameLen;
}


DWORD GetMulConst(DWORD dwSize,DWORD dwConst)
{
	DWORD dwNewSize = (dwSize / dwConst) * dwConst + dwConst;
	return dwNewSize;
}

DWORD BuildFileItemHeader(FSFILE_HEADER** ppfsHeader,DWORD dwFileSize,char* szSearchFileName)
{
	FSFILE_HEADER*	pHeader;
	DWORD	dwNameLen = lstrlen(szSearchFileName);
	DWORD	dwTotalSize = sizeof(FSFILE_HEADER) - (sizeof(char)*4) + dwNameLen + dwFileSize;

	pHeader = (FSFILE_HEADER*)new char[dwTotalSize];

	pHeader->dwFileNameLen = dwNameLen;
	pHeader->dwRealFileSize = dwFileSize;
	pHeader->dwTotalSize = dwTotalSize;
	pHeader->dwFileDataOffset = (DWORD)pHeader->szFileName[dwNameLen] - (DWORD)pHeader ;

	*ppfsHeader = pHeader;
	
	return dwTotalSize;
}


CPackFile::CPackFile()
{	
	InitializeMembers();
}
void CPackFile::InitializeMembers()
{

	m_dwCurrentVersion = 0;
	m_dwMaxFileNum = 0;
	memset(m_szFileName,0,sizeof(m_szFileName));
	m_dwFileNameLen = 0;
	m_pPackFileNameHash = NULL;
	m_pfsHead = NULL;
	m_dwFileItemNum = NULL;
	m_bExistOriginalFile = FALSE;
}
BOOL CPackFile::Initialize(CoStorage* pStorage,VBHASH_HANDLE pFileNameHash,char* szPackFileName)
{
	InitializeMembers();

	m_pStorage = pStorage;
	
	BOOL	bResult = FALSE;
	m_pPackFileNameHash = pFileNameHash;

	m_dwFileNameLen = lstrlen(szPackFileName);
	memset(m_szFileName,0,sizeof(m_szFileName));
	memcpy(m_szFileName,szPackFileName,m_dwFileNameLen);


	DWORD	dwOpenFlag = OPEN_EXISTING;

	DWORD	dwTryCreateCount = 0;
	m_bExistOriginalFile = TRUE;


lb_create_file:
	// 작업용 팩파일을 만든다.이미 생성되어있을 수도 있고 처음 만들수도 있다.
	
	m_hOriginalFile = CreateFile(szPackFileName,GENERIC_READ | GENERIC_WRITE,0,NULL,dwOpenFlag,FILE_ATTRIBUTE_NORMAL,NULL);

	dwTryCreateCount++;
	if (INVALID_HANDLE_VALUE == m_hOriginalFile)
	{
		m_bExistOriginalFile = FALSE;
		dwOpenFlag = CREATE_NEW;
		if (dwTryCreateCount>1)
			goto lb_return;

		goto lb_create_file;		
	}


	if (!m_bExistOriginalFile)
		goto lb_skip_create_index;

	PACK_FILE_HEADER	header;
	DWORD				dwReadBytes;
	dwReadBytes = 0;
	DWORD	massByte = sizeof(header);	
	ReadFile(m_hOriginalFile,&header,massByte,&dwReadBytes,NULL);
	if (dwReadBytes != massByte)
	{
		goto lb_fail_after_create_file;
	}

	m_dwCurrentVersion = header.dwVersion;
	DWORD	i;
	for (i=0; i<header.dwFileItemNum; i++)
	{
		// 현재의 파일포인터를 얻어온다.
		DWORD dwCurrentFilePosition; 
		dwCurrentFilePosition = SetFilePointer(m_hOriginalFile,0,NULL,FILE_CURRENT);

		char	pHeaderBuffer[FSFILE_HEADER_SIZE + _MAX_PATH];
		memset(pHeaderBuffer,0,sizeof(pHeaderBuffer));

		FSFILE_HEADER*	pHeader;
		ReadFile(m_hOriginalFile,pHeaderBuffer,FSFILE_HEADER_SIZE,&dwReadBytes,NULL);
		
		pHeader = (FSFILE_HEADER*)pHeaderBuffer;



		if (!dwReadBytes)
		{
			goto lb_fail_after_create_file;

		}
		// 파일포인터가 헤더에 들어있는 값과 일치하지 않으면 잘못된 파일이다.
		if (dwCurrentFilePosition != pHeader->dwFileDataOffset)
		{
			goto lb_fail_after_create_file;
		}

		// 파일 이름 길이가 비정상적인 경우도 잘못된 파일이다.
		if (pHeader->dwFileNameLen > _MAX_PATH)
		{
	lb_fail_after_create_file:
			CloseHandle(m_hOriginalFile);
#ifdef _DEBUG
			char	szErrTxt[128];
			wsprintf(szErrTxt,"\n %s Courrupted\n",szPackFileName);
			OutputDebugString(szErrTxt);
			__asm int 3
#endif
			goto lb_return;
		}
		ReadFile(m_hOriginalFile,pHeaderBuffer+FSFILE_HEADER_SIZE,pHeader->dwFileNameLen+1,&dwReadBytes,NULL);
		SetFilePointer(m_hOriginalFile,pHeader->dwRealFileSize,NULL,FILE_CURRENT);

		// 메모리상에 인덱스를 구성하기 위하여 스토리지에 넣는다.
		if (!m_pStorage->AddFileToPackFile(this,pHeader->szFileName,pHeader))
		{
#ifdef _DEBUG
			char	szErrTxt[128];
			wsprintf(szErrTxt,"\n Fail to m_pStorage->AddFileToPackFile() \n");
			OutputDebugString(szErrTxt);
			__asm int 3
#endif
		}
	
	}



lb_skip_create_index:
	bResult = TRUE;
lb_return:
	return bResult;
}

DWORD CPackFile::CreateFileInfoList(FSFILE_ATOM_INFO** ppInfoList,DWORD dwMaxNum)
{
	DWORD	dwNum = m_dwFileItemNum;

	if (dwNum > dwMaxNum)
		dwNum = dwMaxNum;

	*ppInfoList = new FSFILE_ATOM_INFO[dwNum];

	FSFILE_DESC*	pCur = m_pfsHead;

	DWORD	dwCount = 0;
	while (pCur)
	{
		(*ppInfoList)[dwCount].dwFileNameLen = pCur->dwFileNameLen;
		(*ppInfoList)[dwCount].dwPositionInPackFile =  pCur->dwPositionInPackFile;
		(*ppInfoList)[dwCount].dwRealFileSize = pCur->dwRealFileSize;
		(*ppInfoList)[dwCount].pszFileName = pCur->pszFileName;
		(*ppInfoList)[dwCount].dwTotalSize = pCur->dwTotalSize;
		dwCount++;
		pCur = pCur->pNextInPackFile;
	}
	return dwNum;
}
void CPackFile::DeleteFileInfoList(FSFILE_ATOM_INFO* pInfoList)
{
	delete [] pInfoList;
}
BOOL CPackFile::BeginCreatePackFile(DWORD dwFlag)
{
	BOOL		bResult = FALSE;

	m_bMustRebuild = FALSE;

	bResult = TRUE;

lb_return:
	return bResult;
}
BOOL CPackFile::AddFileItem(char* szFileName,char* szSearchFileItemName,DWORD dwSearchFileItemLen,FSFILE_DESC* pNewDesc)
{
	// 파일을 추가한다.추가할때 같은 파일이름이 존재하면 기존의 것을 지우고 덮어쓴다.
	// 추가할때 기존의 파일의 디스크에서의 사이즈보다 나중 파일의 디스크 사이즈가 크면 
	// 팩파일 전체를 재구성해야한다. 이 경우는 갱신될 파일리스트를 작성하고 나중에 한번에
	// 업데이트 한다.

	BOOL	bResult = FALSE;
	
	pNewDesc->pPrvInPackFile = NULL;
	if (!m_pfsHead)
	{
		m_pfsHead = pNewDesc;
		pNewDesc->pNextInPackFile = NULL;
		
	}
	else
	{
		pNewDesc->pNextInPackFile = m_pfsHead;
		m_pfsHead->pPrvInPackFile = pNewDesc;
		m_pfsHead = pNewDesc;
	}
	
	pNewDesc->pOwnerPackFile = this;
	pNewDesc->dwFileNameLen = lstrlen(szFileName);
	pNewDesc->pszFileName = new char[pNewDesc->dwFileNameLen+1];
	memset(pNewDesc->pszFileName,0,pNewDesc->dwFileNameLen+1);
	memcpy(pNewDesc->pszFileName,szFileName,pNewDesc->dwFileNameLen);

	m_bMustRebuild	= TRUE;
	bResult = TRUE;
	m_dwFileItemNum++;

lb_return:
	

lb_fail_create_file:
	return bResult;
}

BOOL CPackFile::DeleteFileItem(FSFILE_DESC* pfsDesc)
{
	FSFILE_DESC*	pPrv = pfsDesc->pPrvInPackFile;
	FSFILE_DESC*	pNext = pfsDesc->pNextInPackFile;

	if (pPrv)
		pPrv->pNextInPackFile = pNext;
	

	if (pNext)
		pNext->pPrvInPackFile = pPrv;
	

	if (pfsDesc == m_pfsHead)
	{
		m_pfsHead = pNext;

	}

	delete [] pfsDesc->pszFileName;
	m_bMustRebuild	= TRUE;
	m_dwFileItemNum--;

	return TRUE;

}
/*
GLOBAL_FUNC_DLL STMPOOL_HANDLE	__stdcall	();
GLOBAL_FUNC_DLL void			__stdcall	(STMPOOL_HANDLE pool);


GLOBAL_FUNC_DLL void*			__stdcall	LALAlloc(STMPOOL_HANDLE pool);
GLOBAL_FUNC_DLL void			__stdcall	LALFree(STMPOOL_HANDLE pool,void* pMemory);
*/
BOOL CPackFile::EndCreatePackFile(LOAD_CALLBACK_FUNC pCallBackFunc)
{
	// 갱신될 파일 리스트를 가지고 있다가 이때 한번에 갱신해야된다.

	BOOL	bResult = FALSE;

	if (!m_bMustRebuild)
		goto lb_return;

	char	szWriteFileName[_MAX_PATH];
	memset(szWriteFileName,0,sizeof(szWriteFileName));
	memcpy(szWriteFileName,m_szFileName,m_dwFileNameLen);
	lstrcat(szWriteFileName,".tmp");
	
	HANDLE hWriteFile;
	hWriteFile = CreateFile(szWriteFileName,GENERIC_WRITE,0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);
	if (INVALID_HANDLE_VALUE == hWriteFile)
	{
		goto lb_return;
	}
//////////////////pak encrypt	
	unsigned int mKey1[MAX_CHARKEY_LENGTH] = { '~'^CRYPTOR,'2'^CRYPTOR,'S'^CRYPTOR,'3'^CRYPTOR,'+'^CRYPTOR,'2'^CRYPTOR,'8'^CRYPTOR,'8'^CRYPTOR,'0'^CRYPTOR,'|'^CRYPTOR,'y'^CRYPTOR,'g'^CRYPTOR,'%'^CRYPTOR,'6'^CRYPTOR,'L'^CRYPTOR,'-'^CRYPTOR,'5'^CRYPTOR,'3'^CRYPTOR,'I'^CRYPTOR,'Z'^CRYPTOR,'4'^CRYPTOR,'2'^CRYPTOR,'U'^CRYPTOR,'9'^CRYPTOR,'4'^CRYPTOR,'^'^CRYPTOR,'W'^CRYPTOR,'3'^CRYPTOR,'2'^CRYPTOR,'.'^CRYPTOR,';'^CRYPTOR,'8'^CRYPTOR,'5'^CRYPTOR,'6'^CRYPTOR,'-'^CRYPTOR,'0'^CRYPTOR,'3'^CRYPTOR,'9'^CRYPTOR,'0'^CRYPTOR,'_'^CRYPTOR,'3'^CRYPTOR,'3'^CRYPTOR,'~'^CRYPTOR,'n'^CRYPTOR,'k'^CRYPTOR,'1'^CRYPTOR,'0'^CRYPTOR,'3'^CRYPTOR,'6'^CRYPTOR,'|'^CRYPTOR,'|'^CRYPTOR,'-'^CRYPTOR,'-'^CRYPTOR,'^'^CRYPTOR,'Z'^CRYPTOR,'U'^CRYPTOR,'~'^CRYPTOR,'8'^CRYPTOR,'1'^CRYPTOR,'P'^CRYPTOR,'5'^CRYPTOR,'7'^CRYPTOR,'3'^CRYPTOR,'!'^CRYPTOR,'1'^CRYPTOR,'C'^CRYPTOR,'9'^CRYPTOR,'='^CRYPTOR,'y'^CRYPTOR,'F'^CRYPTOR,'E'^CRYPTOR,'!'^CRYPTOR,'e'^CRYPTOR,'5'^CRYPTOR,'9'^CRYPTOR,'O'^CRYPTOR,'6'^CRYPTOR,'D'^CRYPTOR,'X'^CRYPTOR,';'^CRYPTOR,'7'^CRYPTOR,'8'^CRYPTOR,'m'^CRYPTOR,'Q'^CRYPTOR,'_'^CRYPTOR,'.'^CRYPTOR,'8'^CRYPTOR,'r'^CRYPTOR,'8'^CRYPTOR,'!'^CRYPTOR,'J'^CRYPTOR,'B'^CRYPTOR,'2'^CRYPTOR,'|'^CRYPTOR,'J'^CRYPTOR,'V'^CRYPTOR,'6'^CRYPTOR,'Z'^CRYPTOR,'4'^CRYPTOR,'q'^CRYPTOR,'H'^CRYPTOR,'6'^CRYPTOR,'8'^CRYPTOR,'T'^CRYPTOR,'3'^CRYPTOR,'-'^CRYPTOR,'4'^CRYPTOR,'2'^CRYPTOR,'v'^CRYPTOR,'|'^CRYPTOR,'5'^CRYPTOR,'g'^CRYPTOR,'g'^CRYPTOR,'6'^CRYPTOR,'7'^CRYPTOR,'-'^CRYPTOR,'a'^CRYPTOR,'6'^CRYPTOR,'K'^CRYPTOR,'*'^CRYPTOR,'B'^CRYPTOR,'_'^CRYPTOR,'v'^CRYPTOR,'P'^CRYPTOR,'D'^CRYPTOR,'7'^CRYPTOR,'o'^CRYPTOR,'O'^CRYPTOR,'K'^CRYPTOR,'*'^CRYPTOR,'|'^CRYPTOR,'6'^CRYPTOR,';'^CRYPTOR,'5'^CRYPTOR,'U'^CRYPTOR,'4'^CRYPTOR,'8'^CRYPTOR,'3'^CRYPTOR,'9'^CRYPTOR,'F'^CRYPTOR,'5'^CRYPTOR,'3'^CRYPTOR,'7'^CRYPTOR,'0'^CRYPTOR,'e'^CRYPTOR,'='^CRYPTOR,'N'^CRYPTOR,'5'^CRYPTOR,'H'^CRYPTOR,'1'^CRYPTOR,'4'^CRYPTOR,'2'^CRYPTOR,'9'^CRYPTOR,'m'^CRYPTOR,'0'^CRYPTOR,'m'^CRYPTOR,'u'^CRYPTOR,'8'^CRYPTOR,'0'^CRYPTOR,'|'^CRYPTOR,'b'^CRYPTOR,'+'^CRYPTOR,'+'^CRYPTOR,'C'^CRYPTOR,'S'^CRYPTOR,'8'^CRYPTOR,'+'^CRYPTOR,'p'^CRYPTOR,'3'^CRYPTOR,'e'^CRYPTOR,'X'^CRYPTOR,':'^CRYPTOR,'+'^CRYPTOR,'8'^CRYPTOR,'3'^CRYPTOR,'I'^CRYPTOR,'4'^CRYPTOR,'c'^CRYPTOR,'.'^CRYPTOR,'W'^CRYPTOR,'%'^CRYPTOR,'5'^CRYPTOR,'I'^CRYPTOR,'9'^CRYPTOR,'K'^CRYPTOR,'O'^CRYPTOR,'q'^CRYPTOR,'%'^CRYPTOR,'~'^CRYPTOR,'Q'^CRYPTOR,'7'^CRYPTOR,'u'^CRYPTOR,'~'^CRYPTOR,'1'^CRYPTOR,'5'^CRYPTOR,'7'^CRYPTOR,'.'^CRYPTOR,'5'^CRYPTOR,'0'^CRYPTOR,'7'^CRYPTOR,'*'^CRYPTOR,'*'^CRYPTOR,'4'^CRYPTOR,'g'^CRYPTOR,'0'^CRYPTOR,'R'^CRYPTOR,'_'^CRYPTOR,'G'^CRYPTOR,'V'^CRYPTOR,'3'^CRYPTOR,'2'^CRYPTOR,'_'^CRYPTOR,'1'^CRYPTOR,'s'^CRYPTOR,'~'^CRYPTOR,'0'^CRYPTOR,'w'^CRYPTOR,'5'^CRYPTOR,'r'^CRYPTOR,'|'^CRYPTOR,'~'^CRYPTOR,'-'^CRYPTOR,'%'^CRYPTOR,'w'^CRYPTOR,'9'^CRYPTOR,'0'^CRYPTOR,';'^CRYPTOR,'0'^CRYPTOR,'6'^CRYPTOR,'0'^CRYPTOR,'i'^CRYPTOR,'Z'^CRYPTOR,'D'^CRYPTOR,'9'^CRYPTOR,'='^CRYPTOR,'1'^CRYPTOR,':'^CRYPTOR,'h'^CRYPTOR,'v'^CRYPTOR,'9'^CRYPTOR,'^'^CRYPTOR,'4'^CRYPTOR,'j'^CRYPTOR,'9'^CRYPTOR,'3'^CRYPTOR,'B'^CRYPTOR,'7'^CRYPTOR,'7'^CRYPTOR,'|'^CRYPTOR,'2'^CRYPTOR,'1'^CRYPTOR,'u'^CRYPTOR,'~'^CRYPTOR,'7'^CRYPTOR,'4'^CRYPTOR,'Z'^CRYPTOR,'N'^CRYPTOR,'S'^CRYPTOR,'r'^CRYPTOR,'v'^CRYPTOR,'U'^CRYPTOR,'D'^CRYPTOR,'p'^CRYPTOR,'S'^CRYPTOR,'t'^CRYPTOR,'d'^CRYPTOR,'Q'^CRYPTOR,'j'^CRYPTOR,'b'^CRYPTOR,'i'^CRYPTOR,'T'^CRYPTOR,'H'^CRYPTOR,'e'^CRYPTOR,'j'^CRYPTOR,'r'^CRYPTOR,'N'^CRYPTOR,'T'^CRYPTOR,'P'^CRYPTOR,'g'^CRYPTOR,'f'^CRYPTOR,'s'^CRYPTOR,'t'^CRYPTOR,'v'^CRYPTOR,'p'^CRYPTOR,'I'^CRYPTOR,'X'^CRYPTOR,'x'^CRYPTOR,'H'^CRYPTOR,'M'^CRYPTOR,'M'^CRYPTOR,'g'^CRYPTOR,'B'^CRYPTOR,'I'^CRYPTOR,'P'^CRYPTOR,'A'^CRYPTOR,'G'^CRYPTOR,'C'^CRYPTOR,'s'^CRYPTOR,'c'^CRYPTOR,'f'^CRYPTOR,'z'^CRYPTOR,'W'^CRYPTOR,'u'^CRYPTOR,'W'^CRYPTOR,'U'^CRYPTOR,'U'^CRYPTOR,'x'^CRYPTOR,'f'^CRYPTOR,'s'^CRYPTOR,'W'^CRYPTOR,'h'^CRYPTOR,'I'^CRYPTOR,'j'^CRYPTOR,'R'^CRYPTOR,'O'^CRYPTOR,'h'^CRYPTOR,'R'^CRYPTOR,'a'^CRYPTOR,'A'^CRYPTOR,'P'^CRYPTOR,'F'^CRYPTOR,'i'^CRYPTOR,'v'^CRYPTOR,'b'^CRYPTOR,'w'^CRYPTOR,'r'^CRYPTOR,'R'^CRYPTOR,'L'^CRYPTOR,'x'^CRYPTOR,'S'^CRYPTOR,'k'^CRYPTOR,'e'^CRYPTOR,'t'^CRYPTOR,'C'^CRYPTOR,'p'^CRYPTOR,'t'^CRYPTOR,'I'^CRYPTOR,'c'^CRYPTOR,'o'^CRYPTOR,'q'^CRYPTOR,'h'^CRYPTOR,'L'^CRYPTOR,'S'^CRYPTOR,'X'^CRYPTOR,'h'^CRYPTOR,'V'^CRYPTOR,'B'^CRYPTOR,'o'^CRYPTOR,'d'^CRYPTOR,'c'^CRYPTOR,'N'^CRYPTOR,'i'^CRYPTOR,'n'^CRYPTOR,'i'^CRYPTOR,'Y'^CRYPTOR,'e'^CRYPTOR,'G'^CRYPTOR,'s'^CRYPTOR,'S'^CRYPTOR,'q'^CRYPTOR,'J'^CRYPTOR,'f'^CRYPTOR,'T'^CRYPTOR,'Q'^CRYPTOR,'B'^CRYPTOR,'Y'^CRYPTOR,'G'^CRYPTOR,'w'^CRYPTOR,'k'^CRYPTOR,'B'^CRYPTOR,'Y'^CRYPTOR,'F'^CRYPTOR,'Z'^CRYPTOR,'R'^CRYPTOR,'V'^CRYPTOR,'E'^CRYPTOR,'y'^CRYPTOR,'M'^CRYPTOR,'m'^CRYPTOR,'i'^CRYPTOR,'i'^CRYPTOR,'C'^CRYPTOR,'w'^CRYPTOR,'t'^CRYPTOR,'s'^CRYPTOR,'G'^CRYPTOR,'B'^CRYPTOR,'H'^CRYPTOR,'C'^CRYPTOR,'q'^CRYPTOR,'j'^CRYPTOR,'q'^CRYPTOR,'Z'^CRYPTOR,'n'^CRYPTOR,'m'^CRYPTOR,'I'^CRYPTOR,'g'^CRYPTOR,'S'^CRYPTOR,'g'^CRYPTOR,'H'^CRYPTOR,'Z'^CRYPTOR,'q'^CRYPTOR,'G'^CRYPTOR,'L'^CRYPTOR,'I'^CRYPTOR,'p'^CRYPTOR,'K'^CRYPTOR,'i'^CRYPTOR,'I'^CRYPTOR,'v'^CRYPTOR,'k'^CRYPTOR,'Q'^CRYPTOR,'s'^CRYPTOR,'q'^CRYPTOR,'j'^CRYPTOR,'J'^CRYPTOR,'z'^CRYPTOR,'Z'^CRYPTOR,'x'^CRYPTOR,'k'^CRYPTOR,'X'^CRYPTOR,'V'^CRYPTOR,'q'^CRYPTOR,'R'^CRYPTOR,'r'^CRYPTOR,'Z'^CRYPTOR,'o'^CRYPTOR,'w'^CRYPTOR,'P'^CRYPTOR,'U'^CRYPTOR,'j'^CRYPTOR,'P'^CRYPTOR,'g'^CRYPTOR,'l'^CRYPTOR,'B'^CRYPTOR,'e'^CRYPTOR,'P'^CRYPTOR,'T'^CRYPTOR,'t'^CRYPTOR,'u'^CRYPTOR,'j'^CRYPTOR,'a'^CRYPTOR,'I'^CRYPTOR,'T'^CRYPTOR,'Q'^CRYPTOR,'K'^CRYPTOR,'k'^CRYPTOR,'o'^CRYPTOR,'T'^CRYPTOR,'S'^CRYPTOR,'K'^CRYPTOR,'Z'^CRYPTOR,'k'^CRYPTOR,'e'^CRYPTOR,'q'^CRYPTOR,'L'^CRYPTOR,'A'^CRYPTOR,'e'^CRYPTOR,'b'^CRYPTOR,'S'^CRYPTOR,'s'^CRYPTOR,'X'^CRYPTOR,'A'^CRYPTOR,'p'^CRYPTOR,'c'^CRYPTOR,'A'^CRYPTOR,'w'^CRYPTOR,'k'^CRYPTOR,'b'^CRYPTOR,'H'^CRYPTOR,'x'^CRYPTOR,'j'^CRYPTOR,'G'^CRYPTOR,'s'^CRYPTOR,'Z'^CRYPTOR,'X'^CRYPTOR,'p'^CRYPTOR,'l'^CRYPTOR,'c'^CRYPTOR,'J'^CRYPTOR,'j'^CRYPTOR,'o'^CRYPTOR,'z'^CRYPTOR,'y'^CRYPTOR,'y'^CRYPTOR,'b'^CRYPTOR,'M'^CRYPTOR,'o'^CRYPTOR,'p'^CRYPTOR,'g'^CRYPTOR,'u'^CRYPTOR,'i'^CRYPTOR,'X'^CRYPTOR,'e'^CRYPTOR,'L'^CRYPTOR,'V'^CRYPTOR,'h'^CRYPTOR,'f'^CRYPTOR,'g'^CRYPTOR,'Y'^CRYPTOR,'E'^CRYPTOR,'w'^CRYPTOR,'c'^CRYPTOR,'e'^CRYPTOR,'a'^CRYPTOR,'E'^CRYPTOR,'N'^CRYPTOR,'d'^CRYPTOR,'X'^CRYPTOR,'N'^CRYPTOR,'X'^CRYPTOR,'G'^CRYPTOR };
	unsigned int mKey2[MAX_CHARKEY_LENGTH] = { '%'^CRYPTOR,'%'^CRYPTOR,'%'^CRYPTOR,':'^CRYPTOR,'^'^CRYPTOR,'|'^CRYPTOR,'_'^CRYPTOR,'u'^CRYPTOR,'!'^CRYPTOR,'2'^CRYPTOR,'H'^CRYPTOR,'='^CRYPTOR,'_'^CRYPTOR,'!'^CRYPTOR,'='^CRYPTOR,'w'^CRYPTOR,'C'^CRYPTOR,'x'^CRYPTOR,'G'^CRYPTOR,'%'^CRYPTOR,'c'^CRYPTOR,':'^CRYPTOR,';'^CRYPTOR,'U'^CRYPTOR,'-'^CRYPTOR,'.'^CRYPTOR,'~'^CRYPTOR,'e'^CRYPTOR,'i'^CRYPTOR,'_'^CRYPTOR,'_'^CRYPTOR,'_'^CRYPTOR,'-'^CRYPTOR,'='^CRYPTOR,'-'^CRYPTOR,'|'^CRYPTOR,'|'^CRYPTOR,'_'^CRYPTOR,'O'^CRYPTOR,'n'^CRYPTOR,'l'^CRYPTOR,';'^CRYPTOR,':'^CRYPTOR,'.'^CRYPTOR,'|'^CRYPTOR,'+'^CRYPTOR,'6'^CRYPTOR,'-'^CRYPTOR,'='^CRYPTOR,'X'^CRYPTOR,'~'^CRYPTOR,'i'^CRYPTOR,'D'^CRYPTOR,'Z'^CRYPTOR,'f'^CRYPTOR,'%'^CRYPTOR,'b'^CRYPTOR,'.'^CRYPTOR,'+'^CRYPTOR,'.'^CRYPTOR,'Q'^CRYPTOR,':'^CRYPTOR,'~'^CRYPTOR,'+'^CRYPTOR,'+'^CRYPTOR,'^'^CRYPTOR,'Z'^CRYPTOR,':'^CRYPTOR,'q'^CRYPTOR,'_'^CRYPTOR,'+'^CRYPTOR,'_'^CRYPTOR,'u'^CRYPTOR,'|'^CRYPTOR,'O'^CRYPTOR,'S'^CRYPTOR,'*'^CRYPTOR,'L'^CRYPTOR,';'^CRYPTOR,'d'^CRYPTOR,'I'^CRYPTOR,':'^CRYPTOR,'^'^CRYPTOR,'!'^CRYPTOR,'+'^CRYPTOR,'V'^CRYPTOR,'!'^CRYPTOR,'f'^CRYPTOR,'u'^CRYPTOR,'+'^CRYPTOR,'S'^CRYPTOR,'L'^CRYPTOR,'!'^CRYPTOR,'K'^CRYPTOR,'5'^CRYPTOR,'-'^CRYPTOR,'^'^CRYPTOR,';'^CRYPTOR,'!'^CRYPTOR,'.'^CRYPTOR,'|'^CRYPTOR,'h'^CRYPTOR,'%'^CRYPTOR,'*'^CRYPTOR,'s'^CRYPTOR,'0'^CRYPTOR,'-'^CRYPTOR,'.'^CRYPTOR,':'^CRYPTOR,'u'^CRYPTOR,'_'^CRYPTOR,'!'^CRYPTOR,'4'^CRYPTOR,'!'^CRYPTOR,'!'^CRYPTOR,'K'^CRYPTOR,'4'^CRYPTOR,'.'^CRYPTOR,'='^CRYPTOR,'_'^CRYPTOR,'-'^CRYPTOR,'H'^CRYPTOR,'k'^CRYPTOR,'_'^CRYPTOR,'^'^CRYPTOR,'-'^CRYPTOR,'W'^CRYPTOR,'%'^CRYPTOR,'_'^CRYPTOR,'M'^CRYPTOR,'.'^CRYPTOR,'^'^CRYPTOR,'H'^CRYPTOR,'E'^CRYPTOR,'.'^CRYPTOR,'1'^CRYPTOR,'f'^CRYPTOR,':'^CRYPTOR,'3'^CRYPTOR,'_'^CRYPTOR,'2'^CRYPTOR,'O'^CRYPTOR,'Z'^CRYPTOR,'w'^CRYPTOR,'H'^CRYPTOR,'j'^CRYPTOR,'f'^CRYPTOR,'*'^CRYPTOR,'+'^CRYPTOR,'v'^CRYPTOR,'L'^CRYPTOR,'!'^CRYPTOR,'Y'^CRYPTOR,';'^CRYPTOR,'_'^CRYPTOR,'+'^CRYPTOR,'*'^CRYPTOR,'_'^CRYPTOR,'x'^CRYPTOR,'7'^CRYPTOR,'*'^CRYPTOR,'-'^CRYPTOR,'u'^CRYPTOR,'~'^CRYPTOR,'-'^CRYPTOR,'*'^CRYPTOR,'J'^CRYPTOR,'~'^CRYPTOR,'.'^CRYPTOR,'h'^CRYPTOR,'='^CRYPTOR,'!'^CRYPTOR,'*'^CRYPTOR,'_'^CRYPTOR,'|'^CRYPTOR,'M'^CRYPTOR,'~'^CRYPTOR,'|'^CRYPTOR,'Q'^CRYPTOR,'-'^CRYPTOR,'w'^CRYPTOR,'B'^CRYPTOR,'~'^CRYPTOR,'~'^CRYPTOR,';'^CRYPTOR,'8'^CRYPTOR,'K'^CRYPTOR,'O'^CRYPTOR,':'^CRYPTOR,'X'^CRYPTOR,'%'^CRYPTOR,'o'^CRYPTOR,'+'^CRYPTOR,'~'^CRYPTOR,'_'^CRYPTOR,'i'^CRYPTOR,'+'^CRYPTOR,'+'^CRYPTOR,'8'^CRYPTOR,'!'^CRYPTOR,'1'^CRYPTOR,'7'^CRYPTOR,'!'^CRYPTOR,'^'^CRYPTOR,'+'^CRYPTOR,'+'^CRYPTOR,'~'^CRYPTOR,'~'^CRYPTOR,'w'^CRYPTOR,'|'^CRYPTOR,'L'^CRYPTOR,'-'^CRYPTOR,';'^CRYPTOR,'*'^CRYPTOR,'u'^CRYPTOR,'!'^CRYPTOR,'N'^CRYPTOR,'E'^CRYPTOR,'W'^CRYPTOR,';'^CRYPTOR,':'^CRYPTOR,'T'^CRYPTOR,'*'^CRYPTOR,'j'^CRYPTOR,'|'^CRYPTOR,'l'^CRYPTOR,'.'^CRYPTOR,'K'^CRYPTOR,'-'^CRYPTOR,'='^CRYPTOR,';'^CRYPTOR,'V'^CRYPTOR,'~'^CRYPTOR,':'^CRYPTOR,'-'^CRYPTOR,'~'^CRYPTOR,'='^CRYPTOR,'_'^CRYPTOR,'-'^CRYPTOR,'^'^CRYPTOR,'E'^CRYPTOR,'A'^CRYPTOR,'~'^CRYPTOR,'N'^CRYPTOR,'*'^CRYPTOR,'+'^CRYPTOR,'f'^CRYPTOR,'U'^CRYPTOR,'%'^CRYPTOR,'='^CRYPTOR,'u'^CRYPTOR,'^'^CRYPTOR,'V'^CRYPTOR,'j'^CRYPTOR,';'^CRYPTOR,'x'^CRYPTOR,'T'^CRYPTOR,'E'^CRYPTOR,'m'^CRYPTOR,'V'^CRYPTOR,'H'^CRYPTOR,'e'^CRYPTOR,'Q'^CRYPTOR,'q'^CRYPTOR,'f'^CRYPTOR,'A'^CRYPTOR,'p'^CRYPTOR,'H'^CRYPTOR,'V'^CRYPTOR,'d'^CRYPTOR,'y'^CRYPTOR,'q'^CRYPTOR,'p'^CRYPTOR,'j'^CRYPTOR,'v'^CRYPTOR,'c'^CRYPTOR,'H'^CRYPTOR,'T'^CRYPTOR,'a'^CRYPTOR,'C'^CRYPTOR,'i'^CRYPTOR,'V'^CRYPTOR,'j'^CRYPTOR,'a'^CRYPTOR,'f'^CRYPTOR,'N'^CRYPTOR,'f'^CRYPTOR,'o'^CRYPTOR,'o'^CRYPTOR,'T'^CRYPTOR,'b'^CRYPTOR,'B'^CRYPTOR,'i'^CRYPTOR,'F'^CRYPTOR,'h'^CRYPTOR,'H'^CRYPTOR,'o'^CRYPTOR,'V'^CRYPTOR,'x'^CRYPTOR,'x'^CRYPTOR,'w'^CRYPTOR,'r'^CRYPTOR,'u'^CRYPTOR,'Q'^CRYPTOR,'J'^CRYPTOR,'Z'^CRYPTOR,'k'^CRYPTOR,'D'^CRYPTOR,'k'^CRYPTOR,'U'^CRYPTOR,'f'^CRYPTOR,'p'^CRYPTOR,'m'^CRYPTOR,'i'^CRYPTOR,'d'^CRYPTOR,'L'^CRYPTOR,'o'^CRYPTOR,'Y'^CRYPTOR,'L'^CRYPTOR,'o'^CRYPTOR,'k'^CRYPTOR,'t'^CRYPTOR,'F'^CRYPTOR,'i'^CRYPTOR,'P'^CRYPTOR,'R'^CRYPTOR,'L'^CRYPTOR,'z'^CRYPTOR,'U'^CRYPTOR,'n'^CRYPTOR,'W'^CRYPTOR,'S'^CRYPTOR,'F'^CRYPTOR,'V'^CRYPTOR,'i'^CRYPTOR,'G'^CRYPTOR,'h'^CRYPTOR,'o'^CRYPTOR,'u'^CRYPTOR,'f'^CRYPTOR,'X'^CRYPTOR,'a'^CRYPTOR,'a'^CRYPTOR,'K'^CRYPTOR,'c'^CRYPTOR,'V'^CRYPTOR,'A'^CRYPTOR,'A'^CRYPTOR,'O'^CRYPTOR,'i'^CRYPTOR,'D'^CRYPTOR,'g'^CRYPTOR,'j'^CRYPTOR,'y'^CRYPTOR,'D'^CRYPTOR,'u'^CRYPTOR,'v'^CRYPTOR,'x'^CRYPTOR,'T'^CRYPTOR,'L'^CRYPTOR,'a'^CRYPTOR,'u'^CRYPTOR,'a'^CRYPTOR,'m'^CRYPTOR,'J'^CRYPTOR,'Z'^CRYPTOR,'I'^CRYPTOR,'K'^CRYPTOR,'s'^CRYPTOR,'F'^CRYPTOR,'O'^CRYPTOR,'k'^CRYPTOR,'s'^CRYPTOR,'s'^CRYPTOR,'G'^CRYPTOR,'A'^CRYPTOR,'K'^CRYPTOR,'h'^CRYPTOR,'y'^CRYPTOR,'o'^CRYPTOR,'q'^CRYPTOR,'A'^CRYPTOR,'Z'^CRYPTOR,'O'^CRYPTOR,'H'^CRYPTOR,'P'^CRYPTOR,'p'^CRYPTOR,'k'^CRYPTOR,'z'^CRYPTOR,'f'^CRYPTOR,'C'^CRYPTOR,'P'^CRYPTOR,'M'^CRYPTOR,'A'^CRYPTOR,'a'^CRYPTOR,'S'^CRYPTOR,'N'^CRYPTOR,'I'^CRYPTOR,'E'^CRYPTOR,'I'^CRYPTOR,'k'^CRYPTOR,'t'^CRYPTOR,'I'^CRYPTOR,'h'^CRYPTOR,'O'^CRYPTOR,'N'^CRYPTOR,'R'^CRYPTOR,'Y'^CRYPTOR,'m'^CRYPTOR,'M'^CRYPTOR,'g'^CRYPTOR,'h'^CRYPTOR,'a'^CRYPTOR,'Y'^CRYPTOR,'s'^CRYPTOR,'U'^CRYPTOR,'i'^CRYPTOR,'y'^CRYPTOR,'J'^CRYPTOR,'b'^CRYPTOR,'T'^CRYPTOR,'H'^CRYPTOR,'m'^CRYPTOR,'N'^CRYPTOR,'p'^CRYPTOR,'b'^CRYPTOR,'F'^CRYPTOR,'D'^CRYPTOR,'Y'^CRYPTOR,'c'^CRYPTOR,'c'^CRYPTOR,'M'^CRYPTOR,'g'^CRYPTOR,'M'^CRYPTOR,'F'^CRYPTOR,'Q'^CRYPTOR,'R'^CRYPTOR,'H'^CRYPTOR,'T'^CRYPTOR,'v'^CRYPTOR,'v'^CRYPTOR,'E'^CRYPTOR,'C'^CRYPTOR,'P'^CRYPTOR,'m'^CRYPTOR,'F'^CRYPTOR,'U'^CRYPTOR,'e'^CRYPTOR,'s'^CRYPTOR,'J'^CRYPTOR,'q'^CRYPTOR,'I'^CRYPTOR,'X'^CRYPTOR,'T'^CRYPTOR,'M'^CRYPTOR,'D'^CRYPTOR,'E'^CRYPTOR,'X'^CRYPTOR,'Z'^CRYPTOR,'N'^CRYPTOR,'m'^CRYPTOR,'J'^CRYPTOR,'O'^CRYPTOR,'q'^CRYPTOR,'F'^CRYPTOR,'t'^CRYPTOR,'J'^CRYPTOR,'f'^CRYPTOR,'e'^CRYPTOR,'L'^CRYPTOR,'o'^CRYPTOR,'L'^CRYPTOR,'i'^CRYPTOR,'s'^CRYPTOR,'d'^CRYPTOR,'E'^CRYPTOR,'b'^CRYPTOR,'b'^CRYPTOR,'Z'^CRYPTOR,'D'^CRYPTOR,'W'^CRYPTOR,'j'^CRYPTOR,'X'^CRYPTOR,'F'^CRYPTOR,'o'^CRYPTOR,'O'^CRYPTOR,'m'^CRYPTOR,'x'^CRYPTOR,'a'^CRYPTOR,'c'^CRYPTOR,'s'^CRYPTOR,'z'^CRYPTOR,'P'^CRYPTOR,'L'^CRYPTOR,'Z'^CRYPTOR,'G'^CRYPTOR,'B'^CRYPTOR,'X'^CRYPTOR,'z'^CRYPTOR,'z'^CRYPTOR,'y'^CRYPTOR,'C'^CRYPTOR,'T'^CRYPTOR,'W'^CRYPTOR,'B'^CRYPTOR,'c'^CRYPTOR,'A'^CRYPTOR,'x'^CRYPTOR,'g'^CRYPTOR,'V'^CRYPTOR,'H'^CRYPTOR,'s'^CRYPTOR };
	unsigned int mKey3[MAX_CHARKEY_LENGTH] = { 't'^CRYPTOR,':'^CRYPTOR,'|'^CRYPTOR,'.'^CRYPTOR,'d'^CRYPTOR,'~'^CRYPTOR,'^'^CRYPTOR,'6'^CRYPTOR,'W'^CRYPTOR,'G'^CRYPTOR,'~'^CRYPTOR,'0'^CRYPTOR,'u'^CRYPTOR,'='^CRYPTOR,'3'^CRYPTOR,'!'^CRYPTOR,'_'^CRYPTOR,'M'^CRYPTOR,'^'^CRYPTOR,'='^CRYPTOR,'3'^CRYPTOR,'.'^CRYPTOR,'%'^CRYPTOR,'-'^CRYPTOR,'*'^CRYPTOR,'%'^CRYPTOR,'='^CRYPTOR,';'^CRYPTOR,'~'^CRYPTOR,'='^CRYPTOR,'T'^CRYPTOR,'4'^CRYPTOR,'2'^CRYPTOR,'%'^CRYPTOR,'1'^CRYPTOR,'B'^CRYPTOR,'D'^CRYPTOR,'F'^CRYPTOR,'^'^CRYPTOR,'1'^CRYPTOR,'L'^CRYPTOR,'u'^CRYPTOR,';'^CRYPTOR,'n'^CRYPTOR,'%'^CRYPTOR,'6'^CRYPTOR,'='^CRYPTOR,'|'^CRYPTOR,'9'^CRYPTOR,'*'^CRYPTOR,':'^CRYPTOR,'O'^CRYPTOR,'+'^CRYPTOR,'*'^CRYPTOR,'M'^CRYPTOR,'%'^CRYPTOR,'^'^CRYPTOR,'|'^CRYPTOR,'6'^CRYPTOR,':'^CRYPTOR,'='^CRYPTOR,'X'^CRYPTOR,':'^CRYPTOR,'%'^CRYPTOR,'!'^CRYPTOR,'O'^CRYPTOR,'3'^CRYPTOR,';'^CRYPTOR,'a'^CRYPTOR,'%'^CRYPTOR,':'^CRYPTOR,'8'^CRYPTOR,'^'^CRYPTOR,'7'^CRYPTOR,'F'^CRYPTOR,'|'^CRYPTOR,'.'^CRYPTOR,'l'^CRYPTOR,'+'^CRYPTOR,':'^CRYPTOR,'A'^CRYPTOR,':'^CRYPTOR,'1'^CRYPTOR,'^'^CRYPTOR,'5'^CRYPTOR,'0'^CRYPTOR,'|'^CRYPTOR,'~'^CRYPTOR,'_'^CRYPTOR,'Y'^CRYPTOR,'M'^CRYPTOR,'B'^CRYPTOR,':'^CRYPTOR,'*'^CRYPTOR,'U'^CRYPTOR,'!'^CRYPTOR,'^'^CRYPTOR,':'^CRYPTOR,'_'^CRYPTOR,'*'^CRYPTOR,'|'^CRYPTOR,'K'^CRYPTOR,'%'^CRYPTOR,'*'^CRYPTOR,'A'^CRYPTOR,'2'^CRYPTOR,'|'^CRYPTOR,'*'^CRYPTOR,'|'^CRYPTOR,'.'^CRYPTOR,'l'^CRYPTOR,'W'^CRYPTOR,'b'^CRYPTOR,'+'^CRYPTOR,'4'^CRYPTOR,'k'^CRYPTOR,';'^CRYPTOR,'%'^CRYPTOR,';'^CRYPTOR,'Z'^CRYPTOR,'_'^CRYPTOR,'^'^CRYPTOR,'-'^CRYPTOR,'R'^CRYPTOR,'='^CRYPTOR,'O'^CRYPTOR,'t'^CRYPTOR,'j'^CRYPTOR,'v'^CRYPTOR,'^'^CRYPTOR,'%'^CRYPTOR,'c'^CRYPTOR,'M'^CRYPTOR,':'^CRYPTOR,'V'^CRYPTOR,'%'^CRYPTOR,'^'^CRYPTOR,'|'^CRYPTOR,'Z'^CRYPTOR,'~'^CRYPTOR,'4'^CRYPTOR,'h'^CRYPTOR,'S'^CRYPTOR,'K'^CRYPTOR,'_'^CRYPTOR,'8'^CRYPTOR,'c'^CRYPTOR,'r'^CRYPTOR,':'^CRYPTOR,'+'^CRYPTOR,'%'^CRYPTOR,'D'^CRYPTOR,'.'^CRYPTOR,'%'^CRYPTOR,'2'^CRYPTOR,'~'^CRYPTOR,'!'^CRYPTOR,'E'^CRYPTOR,'!'^CRYPTOR,'u'^CRYPTOR,'Y'^CRYPTOR,'M'^CRYPTOR,'f'^CRYPTOR,';'^CRYPTOR,'^'^CRYPTOR,'1'^CRYPTOR,'8'^CRYPTOR,'!'^CRYPTOR,'~'^CRYPTOR,'c'^CRYPTOR,':'^CRYPTOR,'g'^CRYPTOR,'='^CRYPTOR,'S'^CRYPTOR,'D'^CRYPTOR,'v'^CRYPTOR,';'^CRYPTOR,':'^CRYPTOR,'_'^CRYPTOR,'2'^CRYPTOR,'!'^CRYPTOR,'4'^CRYPTOR,'%'^CRYPTOR,'%'^CRYPTOR,'b'^CRYPTOR,'g'^CRYPTOR,'~'^CRYPTOR,'C'^CRYPTOR,'5'^CRYPTOR,'!'^CRYPTOR,'!'^CRYPTOR,'-'^CRYPTOR,'!'^CRYPTOR,'F'^CRYPTOR,'_'^CRYPTOR,'1'^CRYPTOR,'z'^CRYPTOR,'|'^CRYPTOR,'7'^CRYPTOR,'~'^CRYPTOR,'+'^CRYPTOR,'-'^CRYPTOR,'|'^CRYPTOR,'K'^CRYPTOR,':'^CRYPTOR,'|'^CRYPTOR,'j'^CRYPTOR,'^'^CRYPTOR,'x'^CRYPTOR,'6'^CRYPTOR,'.'^CRYPTOR,';'^CRYPTOR,'J'^CRYPTOR,'_'^CRYPTOR,'='^CRYPTOR,'_'^CRYPTOR,'p'^CRYPTOR,'G'^CRYPTOR,';'^CRYPTOR,'L'^CRYPTOR,'^'^CRYPTOR,'|'^CRYPTOR,'G'^CRYPTOR,'5'^CRYPTOR,'='^CRYPTOR,'+'^CRYPTOR,'R'^CRYPTOR,'='^CRYPTOR,':'^CRYPTOR,'d'^CRYPTOR,'3'^CRYPTOR,'b'^CRYPTOR,'*'^CRYPTOR,'w'^CRYPTOR,'g'^CRYPTOR,'!'^CRYPTOR,'n'^CRYPTOR,'_'^CRYPTOR,'%'^CRYPTOR,'6'^CRYPTOR,'%'^CRYPTOR,'S'^CRYPTOR,'_'^CRYPTOR,'%'^CRYPTOR,'y'^CRYPTOR,'*'^CRYPTOR,'!'^CRYPTOR,':'^CRYPTOR,'~'^CRYPTOR,'h'^CRYPTOR,'d'^CRYPTOR,'u'^CRYPTOR,'2'^CRYPTOR,'8'^CRYPTOR,':'^CRYPTOR,'k'^CRYPTOR,'c'^CRYPTOR,'O'^CRYPTOR,'D'^CRYPTOR,'N'^CRYPTOR,'R'^CRYPTOR,'z'^CRYPTOR,'t'^CRYPTOR,'z'^CRYPTOR,'y'^CRYPTOR,'w'^CRYPTOR,'h'^CRYPTOR,'K'^CRYPTOR,'H'^CRYPTOR,'H'^CRYPTOR,'p'^CRYPTOR,'h'^CRYPTOR,'g'^CRYPTOR,'F'^CRYPTOR,'I'^CRYPTOR,'q'^CRYPTOR,'P'^CRYPTOR,'l'^CRYPTOR,'q'^CRYPTOR,'h'^CRYPTOR,'I'^CRYPTOR,'r'^CRYPTOR,'M'^CRYPTOR,'W'^CRYPTOR,'K'^CRYPTOR,'I'^CRYPTOR,'q'^CRYPTOR,'P'^CRYPTOR,'I'^CRYPTOR,'m'^CRYPTOR,'f'^CRYPTOR,'v'^CRYPTOR,'z'^CRYPTOR,'X'^CRYPTOR,'i'^CRYPTOR,'J'^CRYPTOR,'V'^CRYPTOR,'x'^CRYPTOR,'r'^CRYPTOR,'j'^CRYPTOR,'m'^CRYPTOR,'G'^CRYPTOR,'l'^CRYPTOR,'k'^CRYPTOR,'P'^CRYPTOR,'X'^CRYPTOR,'D'^CRYPTOR,'M'^CRYPTOR,'L'^CRYPTOR,'s'^CRYPTOR,'W'^CRYPTOR,'f'^CRYPTOR,'J'^CRYPTOR,'E'^CRYPTOR,'p'^CRYPTOR,'D'^CRYPTOR,'v'^CRYPTOR,'J'^CRYPTOR,'a'^CRYPTOR,'z'^CRYPTOR,'G'^CRYPTOR,'A'^CRYPTOR,'L'^CRYPTOR,'B'^CRYPTOR,'v'^CRYPTOR,'V'^CRYPTOR,'o'^CRYPTOR,'J'^CRYPTOR,'x'^CRYPTOR,'M'^CRYPTOR,'u'^CRYPTOR,'c'^CRYPTOR,'v'^CRYPTOR,'V'^CRYPTOR,'f'^CRYPTOR,'Q'^CRYPTOR,'i'^CRYPTOR,'q'^CRYPTOR,'p'^CRYPTOR,'e'^CRYPTOR,'w'^CRYPTOR,'q'^CRYPTOR,'C'^CRYPTOR,'d'^CRYPTOR,'C'^CRYPTOR,'M'^CRYPTOR,'A'^CRYPTOR,'O'^CRYPTOR,'P'^CRYPTOR,'m'^CRYPTOR,'D'^CRYPTOR,'W'^CRYPTOR,'h'^CRYPTOR,'F'^CRYPTOR,'X'^CRYPTOR,'V'^CRYPTOR,'j'^CRYPTOR,'C'^CRYPTOR,'E'^CRYPTOR,'o'^CRYPTOR,'n'^CRYPTOR,'s'^CRYPTOR,'H'^CRYPTOR,'f'^CRYPTOR,'v'^CRYPTOR,'Z'^CRYPTOR,'u'^CRYPTOR,'I'^CRYPTOR,'P'^CRYPTOR,'U'^CRYPTOR,'A'^CRYPTOR,'u'^CRYPTOR,'H'^CRYPTOR,'p'^CRYPTOR,'o'^CRYPTOR,'O'^CRYPTOR,'B'^CRYPTOR,'g'^CRYPTOR,'R'^CRYPTOR,'g'^CRYPTOR,'f'^CRYPTOR,'K'^CRYPTOR,'R'^CRYPTOR,'X'^CRYPTOR,'T'^CRYPTOR,'g'^CRYPTOR,'p'^CRYPTOR,'P'^CRYPTOR,'D'^CRYPTOR,'Y'^CRYPTOR,'g'^CRYPTOR,'y'^CRYPTOR,'O'^CRYPTOR,'S'^CRYPTOR,'k'^CRYPTOR,'k'^CRYPTOR,'f'^CRYPTOR,'k'^CRYPTOR,'s'^CRYPTOR,'P'^CRYPTOR,'g'^CRYPTOR,'n'^CRYPTOR,'i'^CRYPTOR,'h'^CRYPTOR,'H'^CRYPTOR,'C'^CRYPTOR,'k'^CRYPTOR,'p'^CRYPTOR,'v'^CRYPTOR,'m'^CRYPTOR,'C'^CRYPTOR,'j'^CRYPTOR,'y'^CRYPTOR,'i'^CRYPTOR,'n'^CRYPTOR,'A'^CRYPTOR,'k'^CRYPTOR,'l'^CRYPTOR,'I'^CRYPTOR,'v'^CRYPTOR,'P'^CRYPTOR,'o'^CRYPTOR,'J'^CRYPTOR,'E'^CRYPTOR,'R'^CRYPTOR,'p'^CRYPTOR,'o'^CRYPTOR,'N'^CRYPTOR,'l'^CRYPTOR,'A'^CRYPTOR,'E'^CRYPTOR,'B'^CRYPTOR,'t'^CRYPTOR,'G'^CRYPTOR,'r'^CRYPTOR,'g'^CRYPTOR,'D'^CRYPTOR,'g'^CRYPTOR,'Q'^CRYPTOR,'O'^CRYPTOR,'i'^CRYPTOR,'X'^CRYPTOR,'J'^CRYPTOR,'V'^CRYPTOR,'S'^CRYPTOR,'J'^CRYPTOR,'j'^CRYPTOR,'Y'^CRYPTOR,'L'^CRYPTOR,'i'^CRYPTOR,'k'^CRYPTOR,'E'^CRYPTOR,'L'^CRYPTOR,'X'^CRYPTOR,'I'^CRYPTOR,'B'^CRYPTOR,'h'^CRYPTOR,'v'^CRYPTOR,'Y'^CRYPTOR,'G'^CRYPTOR,'h'^CRYPTOR,'x'^CRYPTOR,'v'^CRYPTOR,'n'^CRYPTOR,'J'^CRYPTOR,'x'^CRYPTOR,'p'^CRYPTOR,'B'^CRYPTOR,'j'^CRYPTOR,'M'^CRYPTOR,'K'^CRYPTOR,'v'^CRYPTOR,'Z'^CRYPTOR,'p'^CRYPTOR,'g'^CRYPTOR,'L'^CRYPTOR,'o'^CRYPTOR,'T'^CRYPTOR,'T'^CRYPTOR,'o'^CRYPTOR,'m'^CRYPTOR,'Y'^CRYPTOR,'F'^CRYPTOR,'J'^CRYPTOR,'r'^CRYPTOR,'R'^CRYPTOR,'j'^CRYPTOR,'R'^CRYPTOR,'X'^CRYPTOR,'E'^CRYPTOR,'v'^CRYPTOR,'u'^CRYPTOR,'w'^CRYPTOR,'g'^CRYPTOR,'m'^CRYPTOR,'B'^CRYPTOR,'c'^CRYPTOR,'p'^CRYPTOR,'N'^CRYPTOR,'J'^CRYPTOR,'m'^CRYPTOR,'Q'^CRYPTOR,'A'^CRYPTOR,'b'^CRYPTOR,'V'^CRYPTOR,'Q'^CRYPTOR,'H'^CRYPTOR,'p'^CRYPTOR,'K'^CRYPTOR,'g'^CRYPTOR,'r'^CRYPTOR,'v'^CRYPTOR };
	unsigned int mKey4[MAX_CHARKEY_LENGTH] = { 'B'^CRYPTOR,'^'^CRYPTOR,'='^CRYPTOR,';'^CRYPTOR,'='^CRYPTOR,'1'^CRYPTOR,'0'^CRYPTOR,'_'^CRYPTOR,':'^CRYPTOR,'%'^CRYPTOR,'^'^CRYPTOR,'~'^CRYPTOR,'-'^CRYPTOR,'='^CRYPTOR,'P'^CRYPTOR,'+'^CRYPTOR,'^'^CRYPTOR,'_'^CRYPTOR,':'^CRYPTOR,'R'^CRYPTOR,'R'^CRYPTOR,'_'^CRYPTOR,'H'^CRYPTOR,'2'^CRYPTOR,'3'^CRYPTOR,'1'^CRYPTOR,'^'^CRYPTOR,';'^CRYPTOR,'x'^CRYPTOR,'~'^CRYPTOR,'+'^CRYPTOR,'5'^CRYPTOR,'^'^CRYPTOR,'_'^CRYPTOR,'!'^CRYPTOR,'F'^CRYPTOR,'.'^CRYPTOR,'|'^CRYPTOR,'a'^CRYPTOR,'+'^CRYPTOR,'8'^CRYPTOR,'|'^CRYPTOR,';'^CRYPTOR,'_'^CRYPTOR,'~'^CRYPTOR,'+'^CRYPTOR,';'^CRYPTOR,'0'^CRYPTOR,'^'^CRYPTOR,'7'^CRYPTOR,'n'^CRYPTOR,'-'^CRYPTOR,'c'^CRYPTOR,'_'^CRYPTOR,':'^CRYPTOR,'Z'^CRYPTOR,'x'^CRYPTOR,'.'^CRYPTOR,'!'^CRYPTOR,'2'^CRYPTOR,'|'^CRYPTOR,'p'^CRYPTOR,'+'^CRYPTOR,':'^CRYPTOR,'^'^CRYPTOR,'8'^CRYPTOR,'!'^CRYPTOR,'+'^CRYPTOR,'7'^CRYPTOR,'+'^CRYPTOR,'2'^CRYPTOR,'^'^CRYPTOR,'s'^CRYPTOR,'^'^CRYPTOR,'-'^CRYPTOR,'-'^CRYPTOR,'3'^CRYPTOR,'Z'^CRYPTOR,'!'^CRYPTOR,'O'^CRYPTOR,'9'^CRYPTOR,'0'^CRYPTOR,'|'^CRYPTOR,'5'^CRYPTOR,';'^CRYPTOR,'|'^CRYPTOR,'6'^CRYPTOR,'a'^CRYPTOR,'%'^CRYPTOR,'*'^CRYPTOR,':'^CRYPTOR,'|'^CRYPTOR,'^'^CRYPTOR,'_'^CRYPTOR,'^'^CRYPTOR,'*'^CRYPTOR,'3'^CRYPTOR,'3'^CRYPTOR,';'^CRYPTOR,'|'^CRYPTOR,'_'^CRYPTOR,'2'^CRYPTOR,'i'^CRYPTOR,'%'^CRYPTOR,'+'^CRYPTOR,'%'^CRYPTOR,'5'^CRYPTOR,'1'^CRYPTOR,'2'^CRYPTOR,'9'^CRYPTOR,'3'^CRYPTOR,'6'^CRYPTOR,'0'^CRYPTOR,'7'^CRYPTOR,'~'^CRYPTOR,'%'^CRYPTOR,'i'^CRYPTOR,'~'^CRYPTOR,'%'^CRYPTOR,'D'^CRYPTOR,':'^CRYPTOR,'4'^CRYPTOR,'='^CRYPTOR,'='^CRYPTOR,'5'^CRYPTOR,'3'^CRYPTOR,'e'^CRYPTOR,'d'^CRYPTOR,'-'^CRYPTOR,'1'^CRYPTOR,'='^CRYPTOR,'!'^CRYPTOR,'~'^CRYPTOR,'D'^CRYPTOR,'5'^CRYPTOR,'~'^CRYPTOR,'_'^CRYPTOR,'E'^CRYPTOR,'4'^CRYPTOR,'z'^CRYPTOR,'!'^CRYPTOR,'.'^CRYPTOR,'6'^CRYPTOR,':'^CRYPTOR,'%'^CRYPTOR,'1'^CRYPTOR,'.'^CRYPTOR,'-'^CRYPTOR,'S'^CRYPTOR,'0'^CRYPTOR,'%'^CRYPTOR,'%'^CRYPTOR,'X'^CRYPTOR,'7'^CRYPTOR,'w'^CRYPTOR,'h'^CRYPTOR,'3'^CRYPTOR,'t'^CRYPTOR,'6'^CRYPTOR,'4'^CRYPTOR,'_'^CRYPTOR,'|'^CRYPTOR,'%'^CRYPTOR,':'^CRYPTOR,'='^CRYPTOR,'%'^CRYPTOR,';'^CRYPTOR,'!'^CRYPTOR,'~'^CRYPTOR,'3'^CRYPTOR,'2'^CRYPTOR,'W'^CRYPTOR,'G'^CRYPTOR,'~'^CRYPTOR,'+'^CRYPTOR,'L'^CRYPTOR,'6'^CRYPTOR,'!'^CRYPTOR,'6'^CRYPTOR,'='^CRYPTOR,'.'^CRYPTOR,'2'^CRYPTOR,'%'^CRYPTOR,'|'^CRYPTOR,'9'^CRYPTOR,'+'^CRYPTOR,'*'^CRYPTOR,';'^CRYPTOR,'d'^CRYPTOR,'C'^CRYPTOR,'R'^CRYPTOR,';'^CRYPTOR,'-'^CRYPTOR,'-'^CRYPTOR,'1'^CRYPTOR,';'^CRYPTOR,'X'^CRYPTOR,'~'^CRYPTOR,':'^CRYPTOR,'1'^CRYPTOR,'!'^CRYPTOR,'.'^CRYPTOR,'T'^CRYPTOR,'='^CRYPTOR,'1'^CRYPTOR,'+'^CRYPTOR,'L'^CRYPTOR,'+'^CRYPTOR,'9'^CRYPTOR,'9'^CRYPTOR,'u'^CRYPTOR,'n'^CRYPTOR,'%'^CRYPTOR,'_'^CRYPTOR,'+'^CRYPTOR,'%'^CRYPTOR,'0'^CRYPTOR,'-'^CRYPTOR,'v'^CRYPTOR,'W'^CRYPTOR,'S'^CRYPTOR,'!'^CRYPTOR,'%'^CRYPTOR,'i'^CRYPTOR,'='^CRYPTOR,'9'^CRYPTOR,'6'^CRYPTOR,';'^CRYPTOR,'^'^CRYPTOR,'-'^CRYPTOR,'_'^CRYPTOR,';'^CRYPTOR,'9'^CRYPTOR,'l'^CRYPTOR,'9'^CRYPTOR,':'^CRYPTOR,'y'^CRYPTOR,'_'^CRYPTOR,':'^CRYPTOR,'8'^CRYPTOR,'*'^CRYPTOR,'~'^CRYPTOR,'%'^CRYPTOR,'j'^CRYPTOR,'6'^CRYPTOR,'C'^CRYPTOR,';'^CRYPTOR,'N'^CRYPTOR,'-'^CRYPTOR,'.'^CRYPTOR,'-'^CRYPTOR,'*'^CRYPTOR,'6'^CRYPTOR,'E'^CRYPTOR,'G'^CRYPTOR,'t'^CRYPTOR,'I'^CRYPTOR,'j'^CRYPTOR,'a'^CRYPTOR,'K'^CRYPTOR,'s'^CRYPTOR,'q'^CRYPTOR,'z'^CRYPTOR,'E'^CRYPTOR,'d'^CRYPTOR,'d'^CRYPTOR,'v'^CRYPTOR,'i'^CRYPTOR,'S'^CRYPTOR,'g'^CRYPTOR,'C'^CRYPTOR,'h'^CRYPTOR,'d'^CRYPTOR,'C'^CRYPTOR,'G'^CRYPTOR,'A'^CRYPTOR,'Y'^CRYPTOR,'m'^CRYPTOR,'B'^CRYPTOR,'G'^CRYPTOR,'s'^CRYPTOR,'c'^CRYPTOR,'s'^CRYPTOR,'x'^CRYPTOR,'R'^CRYPTOR,'K'^CRYPTOR,'R'^CRYPTOR,'e'^CRYPTOR,'q'^CRYPTOR,'r'^CRYPTOR,'f'^CRYPTOR,'a'^CRYPTOR,'G'^CRYPTOR,'b'^CRYPTOR,'d'^CRYPTOR,'r'^CRYPTOR,'Q'^CRYPTOR,'Q'^CRYPTOR,'j'^CRYPTOR,'L'^CRYPTOR,'N'^CRYPTOR,'G'^CRYPTOR,'J'^CRYPTOR,'p'^CRYPTOR,'l'^CRYPTOR,'M'^CRYPTOR,'O'^CRYPTOR,'M'^CRYPTOR,'Q'^CRYPTOR,'G'^CRYPTOR,'w'^CRYPTOR,'F'^CRYPTOR,'L'^CRYPTOR,'K'^CRYPTOR,'J'^CRYPTOR,'k'^CRYPTOR,'E'^CRYPTOR,'r'^CRYPTOR,'Q'^CRYPTOR,'H'^CRYPTOR,'S'^CRYPTOR,'x'^CRYPTOR,'Q'^CRYPTOR,'S'^CRYPTOR,'P'^CRYPTOR,'O'^CRYPTOR,'L'^CRYPTOR,'V'^CRYPTOR,'a'^CRYPTOR,'L'^CRYPTOR,'J'^CRYPTOR,'W'^CRYPTOR,'f'^CRYPTOR,'k'^CRYPTOR,'i'^CRYPTOR,'g'^CRYPTOR,'Q'^CRYPTOR,'u'^CRYPTOR,'g'^CRYPTOR,'n'^CRYPTOR,'h'^CRYPTOR,'a'^CRYPTOR,'E'^CRYPTOR,'J'^CRYPTOR,'G'^CRYPTOR,'D'^CRYPTOR,'i'^CRYPTOR,'d'^CRYPTOR,'K'^CRYPTOR,'F'^CRYPTOR,'F'^CRYPTOR,'F'^CRYPTOR,'w'^CRYPTOR,'o'^CRYPTOR,'L'^CRYPTOR,'j'^CRYPTOR,'q'^CRYPTOR,'W'^CRYPTOR,'G'^CRYPTOR,'o'^CRYPTOR,'C'^CRYPTOR,'I'^CRYPTOR,'t'^CRYPTOR,'G'^CRYPTOR,'D'^CRYPTOR,'n'^CRYPTOR,'w'^CRYPTOR,'F'^CRYPTOR,'z'^CRYPTOR,'d'^CRYPTOR,'k'^CRYPTOR,'X'^CRYPTOR,'z'^CRYPTOR,'U'^CRYPTOR,'h'^CRYPTOR,'Y'^CRYPTOR,'H'^CRYPTOR,'L'^CRYPTOR,'A'^CRYPTOR,'P'^CRYPTOR,'x'^CRYPTOR,'y'^CRYPTOR,'r'^CRYPTOR,'p'^CRYPTOR,'r'^CRYPTOR,'t'^CRYPTOR,'b'^CRYPTOR,'r'^CRYPTOR,'k'^CRYPTOR,'S'^CRYPTOR,'V'^CRYPTOR,'r'^CRYPTOR,'O'^CRYPTOR,'K'^CRYPTOR,'L'^CRYPTOR,'o'^CRYPTOR,'Q'^CRYPTOR,'s'^CRYPTOR,'P'^CRYPTOR,'m'^CRYPTOR,'e'^CRYPTOR,'A'^CRYPTOR,'v'^CRYPTOR,'e'^CRYPTOR,'D'^CRYPTOR,'Z'^CRYPTOR,'Q'^CRYPTOR,'x'^CRYPTOR,'w'^CRYPTOR,'L'^CRYPTOR,'v'^CRYPTOR,'G'^CRYPTOR,'L'^CRYPTOR,'D'^CRYPTOR,'B'^CRYPTOR,'r'^CRYPTOR,'R'^CRYPTOR,'c'^CRYPTOR,'r'^CRYPTOR,'D'^CRYPTOR,'t'^CRYPTOR,'N'^CRYPTOR,'H'^CRYPTOR,'S'^CRYPTOR,'G'^CRYPTOR,'e'^CRYPTOR,'Z'^CRYPTOR,'g'^CRYPTOR,'s'^CRYPTOR,'k'^CRYPTOR,'S'^CRYPTOR,'W'^CRYPTOR,'H'^CRYPTOR,'k'^CRYPTOR,'V'^CRYPTOR,'g'^CRYPTOR,'o'^CRYPTOR,'R'^CRYPTOR,'P'^CRYPTOR,'t'^CRYPTOR,'w'^CRYPTOR,'p'^CRYPTOR,'c'^CRYPTOR,'s'^CRYPTOR,'F'^CRYPTOR,'k'^CRYPTOR,'Y'^CRYPTOR,'z'^CRYPTOR,'f'^CRYPTOR,'x'^CRYPTOR,'f'^CRYPTOR,'b'^CRYPTOR,'l'^CRYPTOR,'T'^CRYPTOR,'n'^CRYPTOR,'Q'^CRYPTOR,'Y'^CRYPTOR,'X'^CRYPTOR,'u'^CRYPTOR,'g'^CRYPTOR,'U'^CRYPTOR,'N'^CRYPTOR,'P'^CRYPTOR,'k'^CRYPTOR,'E'^CRYPTOR,'G'^CRYPTOR,'C'^CRYPTOR,'Y'^CRYPTOR,'t'^CRYPTOR,'g'^CRYPTOR,'W'^CRYPTOR,'e'^CRYPTOR,'y'^CRYPTOR,'k'^CRYPTOR,'r'^CRYPTOR,'X'^CRYPTOR,'a'^CRYPTOR,'D'^CRYPTOR,'q'^CRYPTOR,'i'^CRYPTOR,'o'^CRYPTOR,'A'^CRYPTOR,'Z'^CRYPTOR,'m'^CRYPTOR,'E'^CRYPTOR,'x'^CRYPTOR,'y'^CRYPTOR,'X'^CRYPTOR,'T'^CRYPTOR,'F'^CRYPTOR,'u'^CRYPTOR,'J'^CRYPTOR,'u'^CRYPTOR,'R'^CRYPTOR,'L'^CRYPTOR,'Y'^CRYPTOR,'c'^CRYPTOR,'j'^CRYPTOR,'e'^CRYPTOR,'e'^CRYPTOR,'b'^CRYPTOR,'j'^CRYPTOR,'W'^CRYPTOR,'w'^CRYPTOR,'M'^CRYPTOR,'n'^CRYPTOR,'S'^CRYPTOR,'q'^CRYPTOR,'b'^CRYPTOR,'L'^CRYPTOR,'e'^CRYPTOR,'V'^CRYPTOR };
	unsigned int mKey5[MAX_CHARKEY_LENGTH] = { 'M'^CRYPTOR,'p'^CRYPTOR,'M'^CRYPTOR,'8'^CRYPTOR,'8'^CRYPTOR,'4'^CRYPTOR,'U'^CRYPTOR,'5'^CRYPTOR,'4'^CRYPTOR,'N'^CRYPTOR,'4'^CRYPTOR,'I'^CRYPTOR,'6'^CRYPTOR,'Y'^CRYPTOR,'!'^CRYPTOR,'A'^CRYPTOR,'u'^CRYPTOR,'O'^CRYPTOR,'9'^CRYPTOR,'9'^CRYPTOR,'^'^CRYPTOR,'+'^CRYPTOR,'^'^CRYPTOR,'e'^CRYPTOR,'M'^CRYPTOR,'Q'^CRYPTOR,'*'^CRYPTOR,'E'^CRYPTOR,'D'^CRYPTOR,'N'^CRYPTOR,'z'^CRYPTOR,'g'^CRYPTOR,'c'^CRYPTOR,'*'^CRYPTOR,'U'^CRYPTOR,'g'^CRYPTOR,'I'^CRYPTOR,'.'^CRYPTOR,'|'^CRYPTOR,'z'^CRYPTOR,';'^CRYPTOR,'2'^CRYPTOR,'F'^CRYPTOR,'8'^CRYPTOR,'S'^CRYPTOR,'F'^CRYPTOR,'7'^CRYPTOR,'b'^CRYPTOR,'e'^CRYPTOR,'p'^CRYPTOR,'5'^CRYPTOR,'e'^CRYPTOR,'5'^CRYPTOR,'J'^CRYPTOR,'~'^CRYPTOR,'F'^CRYPTOR,'N'^CRYPTOR,'d'^CRYPTOR,'%'^CRYPTOR,'U'^CRYPTOR,'g'^CRYPTOR,'t'^CRYPTOR,'G'^CRYPTOR,'!'^CRYPTOR,'Q'^CRYPTOR,'2'^CRYPTOR,'|'^CRYPTOR,'K'^CRYPTOR,':'^CRYPTOR,'5'^CRYPTOR,'v'^CRYPTOR,'B'^CRYPTOR,'C'^CRYPTOR,'O'^CRYPTOR,'z'^CRYPTOR,'T'^CRYPTOR,'7'^CRYPTOR,'D'^CRYPTOR,'U'^CRYPTOR,'q'^CRYPTOR,'1'^CRYPTOR,'7'^CRYPTOR,'E'^CRYPTOR,'9'^CRYPTOR,';'^CRYPTOR,'G'^CRYPTOR,'3'^CRYPTOR,'F'^CRYPTOR,'p'^CRYPTOR,'a'^CRYPTOR,'w'^CRYPTOR,'1'^CRYPTOR,'x'^CRYPTOR,'='^CRYPTOR,'7'^CRYPTOR,'s'^CRYPTOR,'x'^CRYPTOR,'Y'^CRYPTOR,'0'^CRYPTOR,'O'^CRYPTOR,'F'^CRYPTOR,'n'^CRYPTOR,'j'^CRYPTOR,'Z'^CRYPTOR,';'^CRYPTOR,'+'^CRYPTOR,'-'^CRYPTOR,'B'^CRYPTOR,'1'^CRYPTOR,'_'^CRYPTOR,'|'^CRYPTOR,'-'^CRYPTOR,'Z'^CRYPTOR,'y'^CRYPTOR,'8'^CRYPTOR,'w'^CRYPTOR,'3'^CRYPTOR,'q'^CRYPTOR,'4'^CRYPTOR,'2'^CRYPTOR,'Y'^CRYPTOR,'N'^CRYPTOR,'z'^CRYPTOR,'B'^CRYPTOR,'|'^CRYPTOR,'y'^CRYPTOR,'7'^CRYPTOR,'S'^CRYPTOR,'6'^CRYPTOR,'5'^CRYPTOR,'2'^CRYPTOR,'5'^CRYPTOR,'4'^CRYPTOR,':'^CRYPTOR,'R'^CRYPTOR,'*'^CRYPTOR,'J'^CRYPTOR,'f'^CRYPTOR,'8'^CRYPTOR,'%'^CRYPTOR,'.'^CRYPTOR,'a'^CRYPTOR,'e'^CRYPTOR,'T'^CRYPTOR,'='^CRYPTOR,'0'^CRYPTOR,':'^CRYPTOR,'3'^CRYPTOR,'8'^CRYPTOR,'p'^CRYPTOR,'S'^CRYPTOR,'L'^CRYPTOR,'N'^CRYPTOR,'*'^CRYPTOR,'c'^CRYPTOR,'.'^CRYPTOR,'N'^CRYPTOR,'i'^CRYPTOR,'+'^CRYPTOR,'P'^CRYPTOR,'4'^CRYPTOR,'|'^CRYPTOR,'.'^CRYPTOR,'_'^CRYPTOR,'='^CRYPTOR,'7'^CRYPTOR,'Z'^CRYPTOR,'q'^CRYPTOR,'C'^CRYPTOR,'9'^CRYPTOR,'-'^CRYPTOR,'*'^CRYPTOR,'j'^CRYPTOR,'7'^CRYPTOR,':'^CRYPTOR,'a'^CRYPTOR,'5'^CRYPTOR,'7'^CRYPTOR,'3'^CRYPTOR,'0'^CRYPTOR,'.'^CRYPTOR,'3'^CRYPTOR,'p'^CRYPTOR,'2'^CRYPTOR,'~'^CRYPTOR,'Q'^CRYPTOR,'g'^CRYPTOR,'d'^CRYPTOR,'R'^CRYPTOR,'J'^CRYPTOR,'p'^CRYPTOR,'z'^CRYPTOR,'Z'^CRYPTOR,'1'^CRYPTOR,'a'^CRYPTOR,'P'^CRYPTOR,'-'^CRYPTOR,'R'^CRYPTOR,'+'^CRYPTOR,'z'^CRYPTOR,'G'^CRYPTOR,'T'^CRYPTOR,'.'^CRYPTOR,'r'^CRYPTOR,'2'^CRYPTOR,'u'^CRYPTOR,'9'^CRYPTOR,'3'^CRYPTOR,'B'^CRYPTOR,'9'^CRYPTOR,':'^CRYPTOR,'5'^CRYPTOR,'2'^CRYPTOR,'x'^CRYPTOR,'P'^CRYPTOR,'.'^CRYPTOR,'e'^CRYPTOR,'='^CRYPTOR,'a'^CRYPTOR,'D'^CRYPTOR,'J'^CRYPTOR,'9'^CRYPTOR,'R'^CRYPTOR,'N'^CRYPTOR,'1'^CRYPTOR,'S'^CRYPTOR,'.'^CRYPTOR,'y'^CRYPTOR,'^'^CRYPTOR,'8'^CRYPTOR,'3'^CRYPTOR,'b'^CRYPTOR,'~'^CRYPTOR,'Q'^CRYPTOR,'S'^CRYPTOR,'7'^CRYPTOR,'v'^CRYPTOR,'*'^CRYPTOR,'|'^CRYPTOR,';'^CRYPTOR,'Y'^CRYPTOR,'I'^CRYPTOR,'A'^CRYPTOR,'='^CRYPTOR,'8'^CRYPTOR,'t'^CRYPTOR,'O'^CRYPTOR,'^'^CRYPTOR,'='^CRYPTOR,'p'^CRYPTOR,'0'^CRYPTOR,'V'^CRYPTOR,':'^CRYPTOR,'8'^CRYPTOR,'1'^CRYPTOR,'V'^CRYPTOR,'e'^CRYPTOR,'V'^CRYPTOR,'E'^CRYPTOR,'D'^CRYPTOR,'K'^CRYPTOR,'M'^CRYPTOR,'c'^CRYPTOR,'F'^CRYPTOR,'C'^CRYPTOR,'p'^CRYPTOR,'V'^CRYPTOR,'a'^CRYPTOR,'p'^CRYPTOR,'M'^CRYPTOR,'O'^CRYPTOR,'w'^CRYPTOR,'t'^CRYPTOR,'X'^CRYPTOR,'H'^CRYPTOR,'h'^CRYPTOR,'p'^CRYPTOR,'G'^CRYPTOR,'e'^CRYPTOR,'p'^CRYPTOR,'d'^CRYPTOR,'i'^CRYPTOR,'S'^CRYPTOR,'a'^CRYPTOR,'q'^CRYPTOR,'K'^CRYPTOR,'I'^CRYPTOR,'v'^CRYPTOR,'h'^CRYPTOR,'C'^CRYPTOR,'B'^CRYPTOR,'G'^CRYPTOR,'W'^CRYPTOR,'o'^CRYPTOR,'O'^CRYPTOR,'X'^CRYPTOR,'s'^CRYPTOR,'n'^CRYPTOR,'f'^CRYPTOR,'J'^CRYPTOR,'c'^CRYPTOR,'U'^CRYPTOR,'m'^CRYPTOR,'E'^CRYPTOR,'J'^CRYPTOR,'a'^CRYPTOR,'v'^CRYPTOR,'Y'^CRYPTOR,'f'^CRYPTOR,'M'^CRYPTOR,'G'^CRYPTOR,'S'^CRYPTOR,'H'^CRYPTOR,'v'^CRYPTOR,'o'^CRYPTOR,'X'^CRYPTOR,'c'^CRYPTOR,'P'^CRYPTOR,'a'^CRYPTOR,'c'^CRYPTOR,'L'^CRYPTOR,'T'^CRYPTOR,'o'^CRYPTOR,'f'^CRYPTOR,'j'^CRYPTOR,'A'^CRYPTOR,'V'^CRYPTOR,'i'^CRYPTOR,'g'^CRYPTOR,'U'^CRYPTOR,'y'^CRYPTOR,'B'^CRYPTOR,'y'^CRYPTOR,'j'^CRYPTOR,'Z'^CRYPTOR,'k'^CRYPTOR,'h'^CRYPTOR,'b'^CRYPTOR,'G'^CRYPTOR,'Z'^CRYPTOR,'V'^CRYPTOR,'d'^CRYPTOR,'j'^CRYPTOR,'r'^CRYPTOR,'E'^CRYPTOR,'v'^CRYPTOR,'u'^CRYPTOR,'f'^CRYPTOR,'j'^CRYPTOR,'I'^CRYPTOR,'a'^CRYPTOR,'t'^CRYPTOR,'N'^CRYPTOR,'z'^CRYPTOR,'p'^CRYPTOR,'i'^CRYPTOR,'p'^CRYPTOR,'w'^CRYPTOR,'J'^CRYPTOR,'P'^CRYPTOR,'R'^CRYPTOR,'S'^CRYPTOR,'N'^CRYPTOR,'P'^CRYPTOR,'Z'^CRYPTOR,'c'^CRYPTOR,'i'^CRYPTOR,'s'^CRYPTOR,'A'^CRYPTOR,'u'^CRYPTOR,'S'^CRYPTOR,'m'^CRYPTOR,'Z'^CRYPTOR,'G'^CRYPTOR,'d'^CRYPTOR,'Y'^CRYPTOR,'B'^CRYPTOR,'j'^CRYPTOR,'D'^CRYPTOR,'W'^CRYPTOR,'e'^CRYPTOR,'a'^CRYPTOR,'C'^CRYPTOR,'b'^CRYPTOR,'r'^CRYPTOR,'T'^CRYPTOR,'m'^CRYPTOR,'Q'^CRYPTOR,'v'^CRYPTOR,'B'^CRYPTOR,'x'^CRYPTOR,'j'^CRYPTOR,'M'^CRYPTOR,'D'^CRYPTOR,'e'^CRYPTOR,'f'^CRYPTOR,'o'^CRYPTOR,'J'^CRYPTOR,'J'^CRYPTOR,'C'^CRYPTOR,'A'^CRYPTOR,'X'^CRYPTOR,'G'^CRYPTOR,'S'^CRYPTOR,'Y'^CRYPTOR,'Z'^CRYPTOR,'g'^CRYPTOR,'L'^CRYPTOR,'K'^CRYPTOR,'g'^CRYPTOR,'S'^CRYPTOR,'T'^CRYPTOR,'C'^CRYPTOR,'W'^CRYPTOR,'q'^CRYPTOR,'v'^CRYPTOR,'J'^CRYPTOR,'v'^CRYPTOR,'U'^CRYPTOR,'f'^CRYPTOR,'r'^CRYPTOR,'N'^CRYPTOR,'z'^CRYPTOR,'q'^CRYPTOR,'g'^CRYPTOR,'Z'^CRYPTOR,'h'^CRYPTOR,'f'^CRYPTOR,'X'^CRYPTOR,'o'^CRYPTOR,'p'^CRYPTOR,'n'^CRYPTOR,'Z'^CRYPTOR,'D'^CRYPTOR,'Z'^CRYPTOR,'N'^CRYPTOR,'p'^CRYPTOR,'b'^CRYPTOR,'S'^CRYPTOR,'T'^CRYPTOR,'R'^CRYPTOR,'l'^CRYPTOR,'d'^CRYPTOR,'D'^CRYPTOR,'Q'^CRYPTOR,'a'^CRYPTOR,'E'^CRYPTOR,'P'^CRYPTOR,'W'^CRYPTOR,'s'^CRYPTOR,'P'^CRYPTOR,'z'^CRYPTOR,'L'^CRYPTOR,'k'^CRYPTOR,'P'^CRYPTOR,'Z'^CRYPTOR,'B'^CRYPTOR,'V'^CRYPTOR,'p'^CRYPTOR,'k'^CRYPTOR,'e'^CRYPTOR,'O'^CRYPTOR,'p'^CRYPTOR,'h'^CRYPTOR,'P'^CRYPTOR,'w'^CRYPTOR,'i'^CRYPTOR,'v'^CRYPTOR,'X'^CRYPTOR,'r'^CRYPTOR,'x'^CRYPTOR,'D'^CRYPTOR,'Z'^CRYPTOR,'T'^CRYPTOR,'k'^CRYPTOR,'A'^CRYPTOR,'H'^CRYPTOR,'F'^CRYPTOR,'o'^CRYPTOR,'X'^CRYPTOR,'A'^CRYPTOR,'s'^CRYPTOR,'T'^CRYPTOR,'S'^CRYPTOR,'c'^CRYPTOR,'z'^CRYPTOR,'U'^CRYPTOR,'a'^CRYPTOR,'p'^CRYPTOR,'c'^CRYPTOR,'S'^CRYPTOR,'D'^CRYPTOR,'d'^CRYPTOR,'t'^CRYPTOR,'H'^CRYPTOR,'Q'^CRYPTOR,'E'^CRYPTOR,'m'^CRYPTOR,'K'^CRYPTOR,'X'^CRYPTOR,'U'^CRYPTOR,'w'^CRYPTOR,'m'^CRYPTOR,'V'^CRYPTOR,'x'^CRYPTOR,'q'^CRYPTOR,'Z'^CRYPTOR,'r'^CRYPTOR,'G'^CRYPTOR,'U'^CRYPTOR,'g'^CRYPTOR,'F'^CRYPTOR };
	unsigned int mKey6[MAX_CHARKEY_LENGTH] = { 'Z'^CRYPTOR,'W'^CRYPTOR,'n'^CRYPTOR,'B'^CRYPTOR,'2'^CRYPTOR,'1'^CRYPTOR,'O'^CRYPTOR,'m'^CRYPTOR,'x'^CRYPTOR,'3'^CRYPTOR,'D'^CRYPTOR,'x'^CRYPTOR,'5'^CRYPTOR,'2'^CRYPTOR,'M'^CRYPTOR,'K'^CRYPTOR,'Z'^CRYPTOR,'8'^CRYPTOR,'v'^CRYPTOR,'0'^CRYPTOR,'L'^CRYPTOR,'u'^CRYPTOR,';'^CRYPTOR,'8'^CRYPTOR,'i'^CRYPTOR,'9'^CRYPTOR,'2'^CRYPTOR,'6'^CRYPTOR,'N'^CRYPTOR,'5'^CRYPTOR,'z'^CRYPTOR,'f'^CRYPTOR,'Z'^CRYPTOR,'k'^CRYPTOR,'Z'^CRYPTOR,'x'^CRYPTOR,'8'^CRYPTOR,'4'^CRYPTOR,'w'^CRYPTOR,'B'^CRYPTOR,'z'^CRYPTOR,'0'^CRYPTOR,'3'^CRYPTOR,'8'^CRYPTOR,'2'^CRYPTOR,'c'^CRYPTOR,'1'^CRYPTOR,'0'^CRYPTOR,'b'^CRYPTOR,'3'^CRYPTOR,'k'^CRYPTOR,'7'^CRYPTOR,'6'^CRYPTOR,'B'^CRYPTOR,'f'^CRYPTOR,'6'^CRYPTOR,'0'^CRYPTOR,'1'^CRYPTOR,'L'^CRYPTOR,'5'^CRYPTOR,'q'^CRYPTOR,'a'^CRYPTOR,'Y'^CRYPTOR,'8'^CRYPTOR,'2'^CRYPTOR,'5'^CRYPTOR,'W'^CRYPTOR,'k'^CRYPTOR,'4'^CRYPTOR,'1'^CRYPTOR,'Q'^CRYPTOR,'X'^CRYPTOR,'M'^CRYPTOR,'u'^CRYPTOR,'s'^CRYPTOR,'j'^CRYPTOR,'H'^CRYPTOR,'w'^CRYPTOR,'.'^CRYPTOR,'L'^CRYPTOR,'0'^CRYPTOR,'7'^CRYPTOR,'z'^CRYPTOR,'5'^CRYPTOR,'6'^CRYPTOR,'g'^CRYPTOR,'6'^CRYPTOR,'8'^CRYPTOR,'P'^CRYPTOR,'G'^CRYPTOR,'S'^CRYPTOR,'V'^CRYPTOR,'t'^CRYPTOR,'1'^CRYPTOR,'w'^CRYPTOR,'4'^CRYPTOR,'2'^CRYPTOR,'T'^CRYPTOR,'4'^CRYPTOR,'S'^CRYPTOR,'6'^CRYPTOR,'3'^CRYPTOR,'1'^CRYPTOR,'e'^CRYPTOR,'0'^CRYPTOR,'P'^CRYPTOR,'v'^CRYPTOR,'7'^CRYPTOR,'I'^CRYPTOR,'0'^CRYPTOR,'r'^CRYPTOR,'z'^CRYPTOR,'B'^CRYPTOR,'D'^CRYPTOR,'1'^CRYPTOR,'r'^CRYPTOR,'R'^CRYPTOR,'q'^CRYPTOR,'y'^CRYPTOR,'A'^CRYPTOR,'q'^CRYPTOR,'h'^CRYPTOR,'8'^CRYPTOR,'n'^CRYPTOR,'+'^CRYPTOR,'6'^CRYPTOR,'3'^CRYPTOR,'v'^CRYPTOR,'9'^CRYPTOR,'0'^CRYPTOR,'W'^CRYPTOR,'4'^CRYPTOR,'A'^CRYPTOR,'0'^CRYPTOR,'Y'^CRYPTOR,'4'^CRYPTOR,'G'^CRYPTOR,'d'^CRYPTOR,'3'^CRYPTOR,'6'^CRYPTOR,'0'^CRYPTOR,'.'^CRYPTOR,'y'^CRYPTOR,'V'^CRYPTOR,'b'^CRYPTOR,'U'^CRYPTOR,'H'^CRYPTOR,'5'^CRYPTOR,'G'^CRYPTOR,'L'^CRYPTOR,'P'^CRYPTOR,'1'^CRYPTOR,'2'^CRYPTOR,'3'^CRYPTOR,'A'^CRYPTOR,'a'^CRYPTOR,'X'^CRYPTOR,'0'^CRYPTOR,'7'^CRYPTOR,'8'^CRYPTOR,'j'^CRYPTOR,'w'^CRYPTOR,'d'^CRYPTOR,'8'^CRYPTOR,'I'^CRYPTOR,'5'^CRYPTOR,'k'^CRYPTOR,'s'^CRYPTOR,'u'^CRYPTOR,'P'^CRYPTOR,'v'^CRYPTOR,'0'^CRYPTOR,'1'^CRYPTOR,'1'^CRYPTOR,'C'^CRYPTOR,'K'^CRYPTOR,'7'^CRYPTOR,'J'^CRYPTOR,'q'^CRYPTOR,'e'^CRYPTOR,':'^CRYPTOR,'7'^CRYPTOR,'J'^CRYPTOR,'f'^CRYPTOR,'K'^CRYPTOR,'3'^CRYPTOR,'B'^CRYPTOR,'h'^CRYPTOR,'K'^CRYPTOR,'r'^CRYPTOR,'3'^CRYPTOR,'9'^CRYPTOR,'3'^CRYPTOR,'y'^CRYPTOR,'q'^CRYPTOR,'6'^CRYPTOR,'8'^CRYPTOR,'P'^CRYPTOR,'4'^CRYPTOR,'7'^CRYPTOR,'0'^CRYPTOR,'1'^CRYPTOR,'G'^CRYPTOR,'r'^CRYPTOR,'2'^CRYPTOR,'c'^CRYPTOR,'1'^CRYPTOR,'9'^CRYPTOR,'U'^CRYPTOR,'P'^CRYPTOR,'B'^CRYPTOR,'0'^CRYPTOR,'d'^CRYPTOR,'F'^CRYPTOR,'t'^CRYPTOR,'Z'^CRYPTOR,'6'^CRYPTOR,'c'^CRYPTOR,'d'^CRYPTOR,'8'^CRYPTOR,'f'^CRYPTOR,'J'^CRYPTOR,'9'^CRYPTOR,'7'^CRYPTOR,'b'^CRYPTOR,'K'^CRYPTOR,'5'^CRYPTOR,'-'^CRYPTOR,'O'^CRYPTOR,'7'^CRYPTOR,'M'^CRYPTOR,'1'^CRYPTOR,'F'^CRYPTOR,'x'^CRYPTOR,'7'^CRYPTOR,'l'^CRYPTOR,'K'^CRYPTOR,'L'^CRYPTOR,'6'^CRYPTOR,'l'^CRYPTOR,'4'^CRYPTOR,'7'^CRYPTOR,'5'^CRYPTOR,'7'^CRYPTOR,'Z'^CRYPTOR,'d'^CRYPTOR,'1'^CRYPTOR,'1'^CRYPTOR,'C'^CRYPTOR,'r'^CRYPTOR,'A'^CRYPTOR,'Y'^CRYPTOR,'Y'^CRYPTOR,'q'^CRYPTOR,'y'^CRYPTOR,'O'^CRYPTOR,'s'^CRYPTOR,'P'^CRYPTOR,'h'^CRYPTOR,'J'^CRYPTOR,'F'^CRYPTOR,'n'^CRYPTOR,'A'^CRYPTOR,'I'^CRYPTOR,'C'^CRYPTOR,'U'^CRYPTOR,'p'^CRYPTOR,'w'^CRYPTOR,'A'^CRYPTOR,'B'^CRYPTOR,'B'^CRYPTOR,'V'^CRYPTOR,'i'^CRYPTOR,'A'^CRYPTOR,'X'^CRYPTOR,'o'^CRYPTOR,'m'^CRYPTOR,'f'^CRYPTOR,'A'^CRYPTOR,'x'^CRYPTOR,'f'^CRYPTOR,'g'^CRYPTOR,'i'^CRYPTOR,'Q'^CRYPTOR,'E'^CRYPTOR,'F'^CRYPTOR,'M'^CRYPTOR,'c'^CRYPTOR,'h'^CRYPTOR,'h'^CRYPTOR,'v'^CRYPTOR,'d'^CRYPTOR,'m'^CRYPTOR,'H'^CRYPTOR,'r'^CRYPTOR,'L'^CRYPTOR,'F'^CRYPTOR,'f'^CRYPTOR,'j'^CRYPTOR,'o'^CRYPTOR,'e'^CRYPTOR,'V'^CRYPTOR,'o'^CRYPTOR,'h'^CRYPTOR,'H'^CRYPTOR,'u'^CRYPTOR,'F'^CRYPTOR,'r'^CRYPTOR,'d'^CRYPTOR,'k'^CRYPTOR,'i'^CRYPTOR,'W'^CRYPTOR,'M'^CRYPTOR,'F'^CRYPTOR,'n'^CRYPTOR,'e'^CRYPTOR,'C'^CRYPTOR,'I'^CRYPTOR,'n'^CRYPTOR,'o'^CRYPTOR,'y'^CRYPTOR,'z'^CRYPTOR,'Z'^CRYPTOR,'T'^CRYPTOR,'A'^CRYPTOR,'A'^CRYPTOR,'D'^CRYPTOR,'H'^CRYPTOR,'z'^CRYPTOR,'Q'^CRYPTOR,'g'^CRYPTOR,'G'^CRYPTOR,'h'^CRYPTOR,'n'^CRYPTOR,'X'^CRYPTOR,'F'^CRYPTOR,'G'^CRYPTOR,'w'^CRYPTOR,'r'^CRYPTOR,'T'^CRYPTOR,'m'^CRYPTOR,'K'^CRYPTOR,'h'^CRYPTOR,'p'^CRYPTOR,'M'^CRYPTOR,'o'^CRYPTOR,'J'^CRYPTOR,'I'^CRYPTOR,'D'^CRYPTOR,'g'^CRYPTOR,'w'^CRYPTOR,'B'^CRYPTOR,'X'^CRYPTOR,'G'^CRYPTOR,'x'^CRYPTOR,'c'^CRYPTOR,'o'^CRYPTOR,'l'^CRYPTOR,'W'^CRYPTOR,'m'^CRYPTOR,'C'^CRYPTOR,'a'^CRYPTOR,'B'^CRYPTOR,'C'^CRYPTOR,'R'^CRYPTOR,'y'^CRYPTOR,'Z'^CRYPTOR,'L'^CRYPTOR,'i'^CRYPTOR,'N'^CRYPTOR,'d'^CRYPTOR,'J'^CRYPTOR,'J'^CRYPTOR,'J'^CRYPTOR,'t'^CRYPTOR,'h'^CRYPTOR,'i'^CRYPTOR,'w'^CRYPTOR,'H'^CRYPTOR,'g'^CRYPTOR,'E'^CRYPTOR,'m'^CRYPTOR,'T'^CRYPTOR,'t'^CRYPTOR,'z'^CRYPTOR,'x'^CRYPTOR,'j'^CRYPTOR,'e'^CRYPTOR,'v'^CRYPTOR,'Q'^CRYPTOR,'M'^CRYPTOR,'v'^CRYPTOR,'E'^CRYPTOR,'S'^CRYPTOR,'N'^CRYPTOR,'q'^CRYPTOR,'R'^CRYPTOR,'v'^CRYPTOR,'j'^CRYPTOR,'K'^CRYPTOR,'I'^CRYPTOR,'V'^CRYPTOR,'n'^CRYPTOR,'l'^CRYPTOR,'w'^CRYPTOR,'D'^CRYPTOR,'X'^CRYPTOR,'N'^CRYPTOR,'l'^CRYPTOR,'u'^CRYPTOR,'R'^CRYPTOR,'H'^CRYPTOR,'D'^CRYPTOR,'N'^CRYPTOR,'N'^CRYPTOR,'M'^CRYPTOR,'l'^CRYPTOR,'C'^CRYPTOR,'y'^CRYPTOR,'e'^CRYPTOR,'i'^CRYPTOR,'w'^CRYPTOR,'z'^CRYPTOR,'o'^CRYPTOR,'h'^CRYPTOR,'I'^CRYPTOR,'n'^CRYPTOR,'x'^CRYPTOR,'J'^CRYPTOR,'U'^CRYPTOR,'S'^CRYPTOR,'D'^CRYPTOR,'S'^CRYPTOR,'O'^CRYPTOR,'D'^CRYPTOR,'U'^CRYPTOR,'c'^CRYPTOR,'a'^CRYPTOR,'B'^CRYPTOR,'J'^CRYPTOR,'K'^CRYPTOR,'V'^CRYPTOR,'u'^CRYPTOR,'V'^CRYPTOR,'m'^CRYPTOR,'y'^CRYPTOR,'o'^CRYPTOR,'c'^CRYPTOR,'f'^CRYPTOR,'B'^CRYPTOR,'p'^CRYPTOR,'R'^CRYPTOR,'b'^CRYPTOR,'b'^CRYPTOR,'D'^CRYPTOR,'V'^CRYPTOR,'x'^CRYPTOR,'L'^CRYPTOR,'K'^CRYPTOR,'e'^CRYPTOR,'N'^CRYPTOR,'M'^CRYPTOR,'x'^CRYPTOR,'V'^CRYPTOR,'v'^CRYPTOR,'D'^CRYPTOR,'D'^CRYPTOR,'N'^CRYPTOR,'K'^CRYPTOR,'z'^CRYPTOR,'V'^CRYPTOR,'Q'^CRYPTOR,'J'^CRYPTOR,'l'^CRYPTOR,'E'^CRYPTOR,'w'^CRYPTOR,'z'^CRYPTOR,'s'^CRYPTOR,'l'^CRYPTOR,'f'^CRYPTOR,'e'^CRYPTOR,'w'^CRYPTOR,'h'^CRYPTOR,'P'^CRYPTOR,'C'^CRYPTOR,'b'^CRYPTOR,'e'^CRYPTOR,'i'^CRYPTOR,'I'^CRYPTOR,'n'^CRYPTOR,'p'^CRYPTOR,'O'^CRYPTOR,'d'^CRYPTOR,'Z'^CRYPTOR,'S'^CRYPTOR,'E'^CRYPTOR,'L'^CRYPTOR,'E'^CRYPTOR,'e'^CRYPTOR,'t'^CRYPTOR,'r'^CRYPTOR,'c'^CRYPTOR,'P'^CRYPTOR,'c'^CRYPTOR,'n'^CRYPTOR,'M'^CRYPTOR,'T'^CRYPTOR,'h'^CRYPTOR,'m'^CRYPTOR,'q'^CRYPTOR,'w'^CRYPTOR,'C'^CRYPTOR };
	unsigned int mKey7[MAX_CHARKEY_LENGTH] = { 'G'^CRYPTOR,'.'^CRYPTOR,'d'^CRYPTOR,'='^CRYPTOR,'A'^CRYPTOR,'.'^CRYPTOR,'i'^CRYPTOR,'I'^CRYPTOR,'z'^CRYPTOR,'k'^CRYPTOR,':'^CRYPTOR,'+'^CRYPTOR,'E'^CRYPTOR,'Y'^CRYPTOR,'b'^CRYPTOR,'u'^CRYPTOR,'D'^CRYPTOR,'|'^CRYPTOR,'u'^CRYPTOR,'_'^CRYPTOR,'.'^CRYPTOR,'F'^CRYPTOR,'g'^CRYPTOR,'G'^CRYPTOR,'F'^CRYPTOR,'^'^CRYPTOR,'-'^CRYPTOR,';'^CRYPTOR,'.'^CRYPTOR,'h'^CRYPTOR,'e'^CRYPTOR,'h'^CRYPTOR,'1'^CRYPTOR,'='^CRYPTOR,'R'^CRYPTOR,'~'^CRYPTOR,'r'^CRYPTOR,'z'^CRYPTOR,':'^CRYPTOR,'C'^CRYPTOR,'!'^CRYPTOR,'!'^CRYPTOR,'|'^CRYPTOR,';'^CRYPTOR,'O'^CRYPTOR,'M'^CRYPTOR,'r'^CRYPTOR,':'^CRYPTOR,'v'^CRYPTOR,';'^CRYPTOR,'D'^CRYPTOR,'A'^CRYPTOR,'|'^CRYPTOR,'-'^CRYPTOR,'z'^CRYPTOR,'g'^CRYPTOR,'M'^CRYPTOR,'s'^CRYPTOR,'Z'^CRYPTOR,'.'^CRYPTOR,'%'^CRYPTOR,'!'^CRYPTOR,'~'^CRYPTOR,':'^CRYPTOR,'R'^CRYPTOR,'='^CRYPTOR,':'^CRYPTOR,':'^CRYPTOR,'r'^CRYPTOR,'A'^CRYPTOR,'p'^CRYPTOR,'s'^CRYPTOR,'z'^CRYPTOR,'^'^CRYPTOR,'w'^CRYPTOR,'h'^CRYPTOR,'='^CRYPTOR,'V'^CRYPTOR,'P'^CRYPTOR,'='^CRYPTOR,'b'^CRYPTOR,'1'^CRYPTOR,'6'^CRYPTOR,'^'^CRYPTOR,'P'^CRYPTOR,'A'^CRYPTOR,';'^CRYPTOR,'.'^CRYPTOR,'^'^CRYPTOR,'I'^CRYPTOR,'I'^CRYPTOR,'q'^CRYPTOR,'O'^CRYPTOR,'L'^CRYPTOR,'l'^CRYPTOR,'w'^CRYPTOR,'w'^CRYPTOR,'^'^CRYPTOR,'J'^CRYPTOR,';'^CRYPTOR,'='^CRYPTOR,'X'^CRYPTOR,'g'^CRYPTOR,'h'^CRYPTOR,'~'^CRYPTOR,';'^CRYPTOR,'G'^CRYPTOR,'-'^CRYPTOR,';'^CRYPTOR,'Z'^CRYPTOR,'^'^CRYPTOR,'J'^CRYPTOR,'5'^CRYPTOR,'F'^CRYPTOR,'='^CRYPTOR,'O'^CRYPTOR,'E'^CRYPTOR,'u'^CRYPTOR,'6'^CRYPTOR,'P'^CRYPTOR,'a'^CRYPTOR,';'^CRYPTOR,'V'^CRYPTOR,'!'^CRYPTOR,'l'^CRYPTOR,'-'^CRYPTOR,'c'^CRYPTOR,'b'^CRYPTOR,'V'^CRYPTOR,'_'^CRYPTOR,'R'^CRYPTOR,'N'^CRYPTOR,'*'^CRYPTOR,'S'^CRYPTOR,'~'^CRYPTOR,'H'^CRYPTOR,'I'^CRYPTOR,'-'^CRYPTOR,'-'^CRYPTOR,'R'^CRYPTOR,'E'^CRYPTOR,'p'^CRYPTOR,'d'^CRYPTOR,'j'^CRYPTOR,'*'^CRYPTOR,'K'^CRYPTOR,'9'^CRYPTOR,'s'^CRYPTOR,'*'^CRYPTOR,'V'^CRYPTOR,'l'^CRYPTOR,'6'^CRYPTOR,'0'^CRYPTOR,'.'^CRYPTOR,'~'^CRYPTOR,'g'^CRYPTOR,'0'^CRYPTOR,'K'^CRYPTOR,'f'^CRYPTOR,'|'^CRYPTOR,'1'^CRYPTOR,'K'^CRYPTOR,'W'^CRYPTOR,'-'^CRYPTOR,'5'^CRYPTOR,'^'^CRYPTOR,'i'^CRYPTOR,'Q'^CRYPTOR,'2'^CRYPTOR,':'^CRYPTOR,'y'^CRYPTOR,'Q'^CRYPTOR,'.'^CRYPTOR,':'^CRYPTOR,'m'^CRYPTOR,'z'^CRYPTOR,'M'^CRYPTOR,':'^CRYPTOR,'-'^CRYPTOR,';'^CRYPTOR,'o'^CRYPTOR,'J'^CRYPTOR,'u'^CRYPTOR,'p'^CRYPTOR,'H'^CRYPTOR,'h'^CRYPTOR,'*'^CRYPTOR,'^'^CRYPTOR,'+'^CRYPTOR,'L'^CRYPTOR,'u'^CRYPTOR,'u'^CRYPTOR,'_'^CRYPTOR,'^'^CRYPTOR,';'^CRYPTOR,'_'^CRYPTOR,'-'^CRYPTOR,'S'^CRYPTOR,'h'^CRYPTOR,'k'^CRYPTOR,'0'^CRYPTOR,'D'^CRYPTOR,'O'^CRYPTOR,'T'^CRYPTOR,'v'^CRYPTOR,'W'^CRYPTOR,'X'^CRYPTOR,'L'^CRYPTOR,'_'^CRYPTOR,'i'^CRYPTOR,'N'^CRYPTOR,'k'^CRYPTOR,'.'^CRYPTOR,'w'^CRYPTOR,'O'^CRYPTOR,'o'^CRYPTOR,'7'^CRYPTOR,'c'^CRYPTOR,'^'^CRYPTOR,'a'^CRYPTOR,';'^CRYPTOR,'%'^CRYPTOR,'W'^CRYPTOR,'y'^CRYPTOR,'a'^CRYPTOR,'='^CRYPTOR,'W'^CRYPTOR,'A'^CRYPTOR,'|'^CRYPTOR,'c'^CRYPTOR,'t'^CRYPTOR,'y'^CRYPTOR,'a'^CRYPTOR,'I'^CRYPTOR,'|'^CRYPTOR,'o'^CRYPTOR,'.'^CRYPTOR,'+'^CRYPTOR,'.'^CRYPTOR,'g'^CRYPTOR,':'^CRYPTOR,'j'^CRYPTOR,'t'^CRYPTOR,'*'^CRYPTOR,'w'^CRYPTOR,'b'^CRYPTOR,'8'^CRYPTOR,'|'^CRYPTOR,'L'^CRYPTOR,'^'^CRYPTOR,'L'^CRYPTOR,'D'^CRYPTOR,'w'^CRYPTOR,'y'^CRYPTOR,'0'^CRYPTOR,'Q'^CRYPTOR,'O'^CRYPTOR,'H'^CRYPTOR,'d'^CRYPTOR,'J'^CRYPTOR,'k'^CRYPTOR,'C'^CRYPTOR,'R'^CRYPTOR,'w'^CRYPTOR,'u'^CRYPTOR,'W'^CRYPTOR,'S'^CRYPTOR,'K'^CRYPTOR,'m'^CRYPTOR,'g'^CRYPTOR,'t'^CRYPTOR,'m'^CRYPTOR,'j'^CRYPTOR,'H'^CRYPTOR,'c'^CRYPTOR,'D'^CRYPTOR,'s'^CRYPTOR,'y'^CRYPTOR,'y'^CRYPTOR,'p'^CRYPTOR,'A'^CRYPTOR,'K'^CRYPTOR,'G'^CRYPTOR,'p'^CRYPTOR,'j'^CRYPTOR,'k'^CRYPTOR,'m'^CRYPTOR,'s'^CRYPTOR,'a'^CRYPTOR,'a'^CRYPTOR,'e'^CRYPTOR,'H'^CRYPTOR,'p'^CRYPTOR,'y'^CRYPTOR,'U'^CRYPTOR,'G'^CRYPTOR,'e'^CRYPTOR,'x'^CRYPTOR,'G'^CRYPTOR,'y'^CRYPTOR,'a'^CRYPTOR,'h'^CRYPTOR,'H'^CRYPTOR,'S'^CRYPTOR,'O'^CRYPTOR,'V'^CRYPTOR,'G'^CRYPTOR,'Y'^CRYPTOR,'k'^CRYPTOR,'e'^CRYPTOR,'E'^CRYPTOR,'b'^CRYPTOR,'b'^CRYPTOR,'K'^CRYPTOR,'W'^CRYPTOR,'i'^CRYPTOR,'i'^CRYPTOR,'T'^CRYPTOR,'y'^CRYPTOR,'I'^CRYPTOR,'e'^CRYPTOR,'L'^CRYPTOR,'u'^CRYPTOR,'d'^CRYPTOR,'j'^CRYPTOR,'y'^CRYPTOR,'k'^CRYPTOR,'u'^CRYPTOR,'k'^CRYPTOR,'k'^CRYPTOR,'k'^CRYPTOR,'C'^CRYPTOR,'l'^CRYPTOR,'a'^CRYPTOR,'T'^CRYPTOR,'C'^CRYPTOR,'b'^CRYPTOR,'n'^CRYPTOR,'M'^CRYPTOR,'S'^CRYPTOR,'H'^CRYPTOR,'y'^CRYPTOR,'F'^CRYPTOR,'t'^CRYPTOR,'v'^CRYPTOR,'W'^CRYPTOR,'l'^CRYPTOR,'o'^CRYPTOR,'V'^CRYPTOR,'l'^CRYPTOR,'M'^CRYPTOR,'b'^CRYPTOR,'V'^CRYPTOR,'i'^CRYPTOR,'J'^CRYPTOR,'O'^CRYPTOR,'S'^CRYPTOR,'F'^CRYPTOR,'H'^CRYPTOR,'S'^CRYPTOR,'i'^CRYPTOR,'m'^CRYPTOR,'r'^CRYPTOR,'e'^CRYPTOR,'M'^CRYPTOR,'Y'^CRYPTOR,'z'^CRYPTOR,'f'^CRYPTOR,'Y'^CRYPTOR,'H'^CRYPTOR,'Z'^CRYPTOR,'p'^CRYPTOR,'Q'^CRYPTOR,'P'^CRYPTOR,'i'^CRYPTOR,'e'^CRYPTOR,'Q'^CRYPTOR,'X'^CRYPTOR,'Z'^CRYPTOR,'N'^CRYPTOR,'b'^CRYPTOR,'w'^CRYPTOR,'u'^CRYPTOR,'J'^CRYPTOR,'G'^CRYPTOR,'j'^CRYPTOR,'m'^CRYPTOR,'C'^CRYPTOR,'n'^CRYPTOR,'A'^CRYPTOR,'Y'^CRYPTOR,'p'^CRYPTOR,'C'^CRYPTOR,'E'^CRYPTOR,'q'^CRYPTOR,'G'^CRYPTOR,'D'^CRYPTOR,'v'^CRYPTOR,'m'^CRYPTOR,'G'^CRYPTOR,'D'^CRYPTOR,'n'^CRYPTOR,'B'^CRYPTOR,'f'^CRYPTOR,'i'^CRYPTOR,'L'^CRYPTOR,'H'^CRYPTOR,'t'^CRYPTOR,'E'^CRYPTOR,'k'^CRYPTOR,'f'^CRYPTOR,'K'^CRYPTOR,'c'^CRYPTOR,'o'^CRYPTOR,'d'^CRYPTOR,'K'^CRYPTOR,'j'^CRYPTOR,'L'^CRYPTOR,'z'^CRYPTOR,'r'^CRYPTOR,'f'^CRYPTOR,'Q'^CRYPTOR,'d'^CRYPTOR,'R'^CRYPTOR,'M'^CRYPTOR,'y'^CRYPTOR,'Y'^CRYPTOR,'g'^CRYPTOR,'d'^CRYPTOR,'u'^CRYPTOR,'O'^CRYPTOR,'c'^CRYPTOR,'y'^CRYPTOR,'e'^CRYPTOR,'M'^CRYPTOR,'E'^CRYPTOR,'P'^CRYPTOR,'L'^CRYPTOR,'b'^CRYPTOR,'P'^CRYPTOR,'I'^CRYPTOR,'v'^CRYPTOR,'P'^CRYPTOR,'X'^CRYPTOR,'d'^CRYPTOR,'F'^CRYPTOR,'e'^CRYPTOR,'s'^CRYPTOR,'I'^CRYPTOR,'S'^CRYPTOR,'H'^CRYPTOR,'J'^CRYPTOR,'q'^CRYPTOR,'k'^CRYPTOR,'p'^CRYPTOR,'m'^CRYPTOR,'d'^CRYPTOR,'T'^CRYPTOR,'g'^CRYPTOR,'c'^CRYPTOR,'Z'^CRYPTOR,'c'^CRYPTOR,'e'^CRYPTOR,'y'^CRYPTOR,'L'^CRYPTOR,'z'^CRYPTOR,'s'^CRYPTOR,'I'^CRYPTOR,'g'^CRYPTOR,'T'^CRYPTOR,'Z'^CRYPTOR,'G'^CRYPTOR,'x'^CRYPTOR,'c'^CRYPTOR,'b'^CRYPTOR,'n'^CRYPTOR,'k'^CRYPTOR,'r'^CRYPTOR,'O'^CRYPTOR,'w'^CRYPTOR,'n'^CRYPTOR,'m'^CRYPTOR,'a'^CRYPTOR,'Y'^CRYPTOR,'n'^CRYPTOR,'S'^CRYPTOR,'R'^CRYPTOR,'j'^CRYPTOR,'G'^CRYPTOR,'r'^CRYPTOR,'z'^CRYPTOR,'g'^CRYPTOR,'j'^CRYPTOR,'P'^CRYPTOR,'n'^CRYPTOR,'y'^CRYPTOR,'W'^CRYPTOR,'z'^CRYPTOR,'K'^CRYPTOR,'g'^CRYPTOR,'Z'^CRYPTOR,'z'^CRYPTOR,'Y'^CRYPTOR,'r'^CRYPTOR,'k'^CRYPTOR,'A'^CRYPTOR,'s'^CRYPTOR,'Y'^CRYPTOR,'c'^CRYPTOR,'U'^CRYPTOR,'v'^CRYPTOR,'w'^CRYPTOR };
	unsigned int mKey8[MAX_CHARKEY_LENGTH] = { 'w'^CRYPTOR,'Q'^CRYPTOR,'.'^CRYPTOR,'^'^CRYPTOR,'2'^CRYPTOR,'b'^CRYPTOR,'V'^CRYPTOR,'6'^CRYPTOR,'A'^CRYPTOR,'c'^CRYPTOR,'0'^CRYPTOR,'t'^CRYPTOR,'U'^CRYPTOR,'3'^CRYPTOR,'T'^CRYPTOR,':'^CRYPTOR,'.'^CRYPTOR,'c'^CRYPTOR,'|'^CRYPTOR,'~'^CRYPTOR,'_'^CRYPTOR,'-'^CRYPTOR,'4'^CRYPTOR,'e'^CRYPTOR,'i'^CRYPTOR,'|'^CRYPTOR,':'^CRYPTOR,'Y'^CRYPTOR,';'^CRYPTOR,'R'^CRYPTOR,'h'^CRYPTOR,'A'^CRYPTOR,'%'^CRYPTOR,'j'^CRYPTOR,'|'^CRYPTOR,'W'^CRYPTOR,'h'^CRYPTOR,'*'^CRYPTOR,'^'^CRYPTOR,'!'^CRYPTOR,'9'^CRYPTOR,':'^CRYPTOR,'I'^CRYPTOR,'*'^CRYPTOR,'^'^CRYPTOR,'1'^CRYPTOR,'3'^CRYPTOR,'!'^CRYPTOR,'B'^CRYPTOR,'='^CRYPTOR,'='^CRYPTOR,'+'^CRYPTOR,'9'^CRYPTOR,'2'^CRYPTOR,'2'^CRYPTOR,'G'^CRYPTOR,'W'^CRYPTOR,'='^CRYPTOR,'E'^CRYPTOR,'T'^CRYPTOR,'|'^CRYPTOR,':'^CRYPTOR,'E'^CRYPTOR,'q'^CRYPTOR,'1'^CRYPTOR,'C'^CRYPTOR,'f'^CRYPTOR,'2'^CRYPTOR,'.'^CRYPTOR,'r'^CRYPTOR,'1'^CRYPTOR,'~'^CRYPTOR,'7'^CRYPTOR,'*'^CRYPTOR,'!'^CRYPTOR,'0'^CRYPTOR,'s'^CRYPTOR,'t'^CRYPTOR,'4'^CRYPTOR,'U'^CRYPTOR,'G'^CRYPTOR,'.'^CRYPTOR,'+'^CRYPTOR,'9'^CRYPTOR,'|'^CRYPTOR,'p'^CRYPTOR,'!'^CRYPTOR,'C'^CRYPTOR,'7'^CRYPTOR,'S'^CRYPTOR,'M'^CRYPTOR,'0'^CRYPTOR,'J'^CRYPTOR,'%'^CRYPTOR,'.'^CRYPTOR,'t'^CRYPTOR,'_'^CRYPTOR,'y'^CRYPTOR,'='^CRYPTOR,':'^CRYPTOR,'i'^CRYPTOR,'0'^CRYPTOR,'='^CRYPTOR,'~'^CRYPTOR,'b'^CRYPTOR,'*'^CRYPTOR,'j'^CRYPTOR,'='^CRYPTOR,'+'^CRYPTOR,'h'^CRYPTOR,'0'^CRYPTOR,'^'^CRYPTOR,'g'^CRYPTOR,'G'^CRYPTOR,'Q'^CRYPTOR,'V'^CRYPTOR,'~'^CRYPTOR,'.'^CRYPTOR,'e'^CRYPTOR,'5'^CRYPTOR,'*'^CRYPTOR,'='^CRYPTOR,';'^CRYPTOR,'d'^CRYPTOR,'x'^CRYPTOR,'C'^CRYPTOR,'^'^CRYPTOR,'e'^CRYPTOR,'I'^CRYPTOR,'~'^CRYPTOR,'^'^CRYPTOR,'o'^CRYPTOR,'!'^CRYPTOR,'^'^CRYPTOR,'W'^CRYPTOR,'4'^CRYPTOR,'q'^CRYPTOR,'Y'^CRYPTOR,'%'^CRYPTOR,'5'^CRYPTOR,'%'^CRYPTOR,'+'^CRYPTOR,'5'^CRYPTOR,'B'^CRYPTOR,'j'^CRYPTOR,';'^CRYPTOR,'z'^CRYPTOR,'s'^CRYPTOR,'!'^CRYPTOR,'~'^CRYPTOR,'s'^CRYPTOR,'j'^CRYPTOR,'-'^CRYPTOR,':'^CRYPTOR,'_'^CRYPTOR,'t'^CRYPTOR,':'^CRYPTOR,'^'^CRYPTOR,';'^CRYPTOR,'%'^CRYPTOR,'5'^CRYPTOR,'p'^CRYPTOR,'Y'^CRYPTOR,'+'^CRYPTOR,'3'^CRYPTOR,'3'^CRYPTOR,'h'^CRYPTOR,'*'^CRYPTOR,'C'^CRYPTOR,'k'^CRYPTOR,'='^CRYPTOR,'u'^CRYPTOR,'R'^CRYPTOR,'F'^CRYPTOR,'.'^CRYPTOR,'H'^CRYPTOR,'n'^CRYPTOR,'_'^CRYPTOR,'k'^CRYPTOR,'='^CRYPTOR,'_'^CRYPTOR,'|'^CRYPTOR,'L'^CRYPTOR,'6'^CRYPTOR,'%'^CRYPTOR,'h'^CRYPTOR,'|'^CRYPTOR,'z'^CRYPTOR,'c'^CRYPTOR,'^'^CRYPTOR,'z'^CRYPTOR,'*'^CRYPTOR,'1'^CRYPTOR,':'^CRYPTOR,'p'^CRYPTOR,'_'^CRYPTOR,'x'^CRYPTOR,'A'^CRYPTOR,'.'^CRYPTOR,';'^CRYPTOR,';'^CRYPTOR,'O'^CRYPTOR,'i'^CRYPTOR,'p'^CRYPTOR,'-'^CRYPTOR,'1'^CRYPTOR,'d'^CRYPTOR,'Q'^CRYPTOR,'.'^CRYPTOR,'s'^CRYPTOR,'p'^CRYPTOR,'|'^CRYPTOR,'*'^CRYPTOR,'R'^CRYPTOR,'r'^CRYPTOR,'H'^CRYPTOR,'%'^CRYPTOR,'-'^CRYPTOR,':'^CRYPTOR,'+'^CRYPTOR,'y'^CRYPTOR,'M'^CRYPTOR,'~'^CRYPTOR,'A'^CRYPTOR,'i'^CRYPTOR,'*'^CRYPTOR,'3'^CRYPTOR,'-'^CRYPTOR,'G'^CRYPTOR,'w'^CRYPTOR,'.'^CRYPTOR,'w'^CRYPTOR,'%'^CRYPTOR,'R'^CRYPTOR,':'^CRYPTOR,'_'^CRYPTOR,':'^CRYPTOR,'7'^CRYPTOR,'D'^CRYPTOR,'5'^CRYPTOR,'|'^CRYPTOR,':'^CRYPTOR,'='^CRYPTOR,'Z'^CRYPTOR,'9'^CRYPTOR,'U'^CRYPTOR,'M'^CRYPTOR,'|'^CRYPTOR,'1'^CRYPTOR,'e'^CRYPTOR,'Q'^CRYPTOR,'.'^CRYPTOR,'l'^CRYPTOR,'|'^CRYPTOR,'r'^CRYPTOR,'w'^CRYPTOR,'C'^CRYPTOR,'B'^CRYPTOR,'D'^CRYPTOR,'B'^CRYPTOR,'J'^CRYPTOR,'s'^CRYPTOR,'R'^CRYPTOR,'u'^CRYPTOR,'W'^CRYPTOR,'m'^CRYPTOR,'j'^CRYPTOR,'G'^CRYPTOR,'J'^CRYPTOR,'W'^CRYPTOR,'m'^CRYPTOR,'F'^CRYPTOR,'C'^CRYPTOR,'E'^CRYPTOR,'o'^CRYPTOR,'C'^CRYPTOR,'P'^CRYPTOR,'C'^CRYPTOR,'m'^CRYPTOR,'W'^CRYPTOR,'x'^CRYPTOR,'Y'^CRYPTOR,'u'^CRYPTOR,'T'^CRYPTOR,'h'^CRYPTOR,'x'^CRYPTOR,'E'^CRYPTOR,'x'^CRYPTOR,'q'^CRYPTOR,'d'^CRYPTOR,'W'^CRYPTOR,'Z'^CRYPTOR,'N'^CRYPTOR,'b'^CRYPTOR,'f'^CRYPTOR,'H'^CRYPTOR,'f'^CRYPTOR,'a'^CRYPTOR,'Z'^CRYPTOR,'D'^CRYPTOR,'U'^CRYPTOR,'m'^CRYPTOR,'m'^CRYPTOR,'M'^CRYPTOR,'z'^CRYPTOR,'b'^CRYPTOR,'e'^CRYPTOR,'N'^CRYPTOR,'Q'^CRYPTOR,'g'^CRYPTOR,'N'^CRYPTOR,'i'^CRYPTOR,'z'^CRYPTOR,'M'^CRYPTOR,'y'^CRYPTOR,'L'^CRYPTOR,'q'^CRYPTOR,'F'^CRYPTOR,'J'^CRYPTOR,'g'^CRYPTOR,'h'^CRYPTOR,'T'^CRYPTOR,'J'^CRYPTOR,'r'^CRYPTOR,'K'^CRYPTOR,'V'^CRYPTOR,'c'^CRYPTOR,'M'^CRYPTOR,'W'^CRYPTOR,'i'^CRYPTOR,'l'^CRYPTOR,'K'^CRYPTOR,'k'^CRYPTOR,'B'^CRYPTOR,'N'^CRYPTOR,'r'^CRYPTOR,'p'^CRYPTOR,'X'^CRYPTOR,'q'^CRYPTOR,'j'^CRYPTOR,'e'^CRYPTOR,'A'^CRYPTOR,'I'^CRYPTOR,'I'^CRYPTOR,'S'^CRYPTOR,'B'^CRYPTOR,'M'^CRYPTOR,'x'^CRYPTOR,'h'^CRYPTOR,'y'^CRYPTOR,'o'^CRYPTOR,'Y'^CRYPTOR,'V'^CRYPTOR,'P'^CRYPTOR,'T'^CRYPTOR,'l'^CRYPTOR,'j'^CRYPTOR,'L'^CRYPTOR,'N'^CRYPTOR,'C'^CRYPTOR,'a'^CRYPTOR,'Y'^CRYPTOR,'r'^CRYPTOR,'z'^CRYPTOR,'G'^CRYPTOR,'U'^CRYPTOR,'C'^CRYPTOR,'m'^CRYPTOR,'m'^CRYPTOR,'S'^CRYPTOR,'l'^CRYPTOR,'M'^CRYPTOR,'g'^CRYPTOR,'j'^CRYPTOR,'P'^CRYPTOR,'t'^CRYPTOR,'p'^CRYPTOR,'R'^CRYPTOR,'n'^CRYPTOR,'g'^CRYPTOR,'E'^CRYPTOR,'c'^CRYPTOR,'a'^CRYPTOR,'p'^CRYPTOR,'e'^CRYPTOR,'Q'^CRYPTOR,'p'^CRYPTOR,'L'^CRYPTOR,'B'^CRYPTOR,'L'^CRYPTOR,'n'^CRYPTOR,'v'^CRYPTOR,'z'^CRYPTOR,'O'^CRYPTOR,'y'^CRYPTOR,'A'^CRYPTOR,'e'^CRYPTOR,'z'^CRYPTOR,'T'^CRYPTOR,'y'^CRYPTOR,'d'^CRYPTOR,'e'^CRYPTOR,'C'^CRYPTOR,'X'^CRYPTOR,'h'^CRYPTOR,'n'^CRYPTOR,'R'^CRYPTOR,'X'^CRYPTOR,'L'^CRYPTOR,'x'^CRYPTOR,'s'^CRYPTOR,'b'^CRYPTOR,'t'^CRYPTOR,'L'^CRYPTOR,'d'^CRYPTOR,'i'^CRYPTOR,'r'^CRYPTOR,'E'^CRYPTOR,'F'^CRYPTOR,'C'^CRYPTOR,'S'^CRYPTOR,'m'^CRYPTOR,'R'^CRYPTOR,'E'^CRYPTOR,'P'^CRYPTOR,'R'^CRYPTOR,'F'^CRYPTOR,'R'^CRYPTOR,'M'^CRYPTOR,'N'^CRYPTOR,'l'^CRYPTOR,'g'^CRYPTOR,'h'^CRYPTOR,'E'^CRYPTOR,'J'^CRYPTOR,'Z'^CRYPTOR,'J'^CRYPTOR,'Z'^CRYPTOR,'k'^CRYPTOR,'I'^CRYPTOR,'J'^CRYPTOR,'h'^CRYPTOR,'E'^CRYPTOR,'V'^CRYPTOR,'e'^CRYPTOR,'a'^CRYPTOR,'A'^CRYPTOR,'x'^CRYPTOR,'h'^CRYPTOR,'M'^CRYPTOR,'b'^CRYPTOR,'w'^CRYPTOR,'F'^CRYPTOR,'U'^CRYPTOR,'Q'^CRYPTOR,'S'^CRYPTOR,'b'^CRYPTOR,'N'^CRYPTOR,'F'^CRYPTOR,'o'^CRYPTOR,'V'^CRYPTOR,'D'^CRYPTOR,'Q'^CRYPTOR,'X'^CRYPTOR,'d'^CRYPTOR,'a'^CRYPTOR,'T'^CRYPTOR,'C'^CRYPTOR,'i'^CRYPTOR,'c'^CRYPTOR,'O'^CRYPTOR,'G'^CRYPTOR,'H'^CRYPTOR,'a'^CRYPTOR,'q'^CRYPTOR,'y'^CRYPTOR,'o'^CRYPTOR,'O'^CRYPTOR,'O'^CRYPTOR,'W'^CRYPTOR,'h'^CRYPTOR,'g'^CRYPTOR,'w'^CRYPTOR,'D'^CRYPTOR,'s'^CRYPTOR,'w'^CRYPTOR,'H'^CRYPTOR,'H'^CRYPTOR,'c'^CRYPTOR,'A'^CRYPTOR,'k'^CRYPTOR,'O'^CRYPTOR,'b'^CRYPTOR,'i'^CRYPTOR,'h'^CRYPTOR,'T'^CRYPTOR,'o'^CRYPTOR,'K'^CRYPTOR,'L'^CRYPTOR,'u'^CRYPTOR,'C'^CRYPTOR,'t'^CRYPTOR,'W'^CRYPTOR,'y'^CRYPTOR,'T'^CRYPTOR,'n'^CRYPTOR,'O'^CRYPTOR,'V'^CRYPTOR,'E'^CRYPTOR,'e'^CRYPTOR,'d'^CRYPTOR,'H'^CRYPTOR };
	unsigned int mKey9[MAX_CHARKEY_LENGTH] = { '='^CRYPTOR,'9'^CRYPTOR,'L'^CRYPTOR,'Y'^CRYPTOR,'W'^CRYPTOR,'5'^CRYPTOR,'j'^CRYPTOR,'9'^CRYPTOR,'c'^CRYPTOR,'7'^CRYPTOR,'='^CRYPTOR,'j'^CRYPTOR,'W'^CRYPTOR,'8'^CRYPTOR,'0'^CRYPTOR,'2'^CRYPTOR,'-'^CRYPTOR,'7'^CRYPTOR,'6'^CRYPTOR,'V'^CRYPTOR,'8'^CRYPTOR,'1'^CRYPTOR,':'^CRYPTOR,'1'^CRYPTOR,'f'^CRYPTOR,'S'^CRYPTOR,'y'^CRYPTOR,'J'^CRYPTOR,'8'^CRYPTOR,'2'^CRYPTOR,'%'^CRYPTOR,'8'^CRYPTOR,'C'^CRYPTOR,'T'^CRYPTOR,'s'^CRYPTOR,'R'^CRYPTOR,'M'^CRYPTOR,'.'^CRYPTOR,'J'^CRYPTOR,'3'^CRYPTOR,'A'^CRYPTOR,'|'^CRYPTOR,'9'^CRYPTOR,'2'^CRYPTOR,':'^CRYPTOR,'J'^CRYPTOR,'6'^CRYPTOR,'x'^CRYPTOR,'h'^CRYPTOR,'^'^CRYPTOR,'3'^CRYPTOR,'T'^CRYPTOR,'Z'^CRYPTOR,'V'^CRYPTOR,'C'^CRYPTOR,'H'^CRYPTOR,'l'^CRYPTOR,'N'^CRYPTOR,'8'^CRYPTOR,'T'^CRYPTOR,'Q'^CRYPTOR,'E'^CRYPTOR,'T'^CRYPTOR,'6'^CRYPTOR,'9'^CRYPTOR,'Z'^CRYPTOR,'E'^CRYPTOR,'W'^CRYPTOR,'-'^CRYPTOR,'O'^CRYPTOR,';'^CRYPTOR,'0'^CRYPTOR,'0'^CRYPTOR,'4'^CRYPTOR,'v'^CRYPTOR,'k'^CRYPTOR,'_'^CRYPTOR,'l'^CRYPTOR,'N'^CRYPTOR,'P'^CRYPTOR,'U'^CRYPTOR,'6'^CRYPTOR,'5'^CRYPTOR,'5'^CRYPTOR,'B'^CRYPTOR,'8'^CRYPTOR,'='^CRYPTOR,'6'^CRYPTOR,'p'^CRYPTOR,'3'^CRYPTOR,'q'^CRYPTOR,'1'^CRYPTOR,'M'^CRYPTOR,'J'^CRYPTOR,'8'^CRYPTOR,'g'^CRYPTOR,'R'^CRYPTOR,'H'^CRYPTOR,'e'^CRYPTOR,'A'^CRYPTOR,'^'^CRYPTOR,'|'^CRYPTOR,'m'^CRYPTOR,'~'^CRYPTOR,':'^CRYPTOR,'0'^CRYPTOR,'^'^CRYPTOR,'6'^CRYPTOR,'2'^CRYPTOR,'z'^CRYPTOR,'i'^CRYPTOR,'5'^CRYPTOR,':'^CRYPTOR,'6'^CRYPTOR,'%'^CRYPTOR,'+'^CRYPTOR,'J'^CRYPTOR,'8'^CRYPTOR,';'^CRYPTOR,'7'^CRYPTOR,'5'^CRYPTOR,'~'^CRYPTOR,'C'^CRYPTOR,'|'^CRYPTOR,'-'^CRYPTOR,'C'^CRYPTOR,'6'^CRYPTOR,'2'^CRYPTOR,'8'^CRYPTOR,'|'^CRYPTOR,';'^CRYPTOR,'n'^CRYPTOR,'8'^CRYPTOR,'2'^CRYPTOR,'0'^CRYPTOR,'9'^CRYPTOR,'O'^CRYPTOR,'+'^CRYPTOR,'3'^CRYPTOR,'*'^CRYPTOR,'S'^CRYPTOR,'H'^CRYPTOR,'='^CRYPTOR,';'^CRYPTOR,'+'^CRYPTOR,'o'^CRYPTOR,'t'^CRYPTOR,'t'^CRYPTOR,'6'^CRYPTOR,'2'^CRYPTOR,'1'^CRYPTOR,'3'^CRYPTOR,'+'^CRYPTOR,'f'^CRYPTOR,'X'^CRYPTOR,'p'^CRYPTOR,'V'^CRYPTOR,'2'^CRYPTOR,'4'^CRYPTOR,'2'^CRYPTOR,'k'^CRYPTOR,'|'^CRYPTOR,'l'^CRYPTOR,'8'^CRYPTOR,'B'^CRYPTOR,'^'^CRYPTOR,'+'^CRYPTOR,'R'^CRYPTOR,'7'^CRYPTOR,'z'^CRYPTOR,'Y'^CRYPTOR,'='^CRYPTOR,'P'^CRYPTOR,'8'^CRYPTOR,'8'^CRYPTOR,'m'^CRYPTOR,'3'^CRYPTOR,'9'^CRYPTOR,'-'^CRYPTOR,'5'^CRYPTOR,'4'^CRYPTOR,'g'^CRYPTOR,'9'^CRYPTOR,'L'^CRYPTOR,'+'^CRYPTOR,'!'^CRYPTOR,'8'^CRYPTOR,'X'^CRYPTOR,'1'^CRYPTOR,'^'^CRYPTOR,'+'^CRYPTOR,'*'^CRYPTOR,'e'^CRYPTOR,'~'^CRYPTOR,'|'^CRYPTOR,'~'^CRYPTOR,'0'^CRYPTOR,'5'^CRYPTOR,'e'^CRYPTOR,'q'^CRYPTOR,'U'^CRYPTOR,'^'^CRYPTOR,'z'^CRYPTOR,'i'^CRYPTOR,'5'^CRYPTOR,'g'^CRYPTOR,'o'^CRYPTOR,'+'^CRYPTOR,'6'^CRYPTOR,'r'^CRYPTOR,'2'^CRYPTOR,'Z'^CRYPTOR,'!'^CRYPTOR,'8'^CRYPTOR,'E'^CRYPTOR,'A'^CRYPTOR,'v'^CRYPTOR,'g'^CRYPTOR,'.'^CRYPTOR,'%'^CRYPTOR,'p'^CRYPTOR,'3'^CRYPTOR,'S'^CRYPTOR,'9'^CRYPTOR,'*'^CRYPTOR,'8'^CRYPTOR,'X'^CRYPTOR,'X'^CRYPTOR,'5'^CRYPTOR,':'^CRYPTOR,'2'^CRYPTOR,'5'^CRYPTOR,'S'^CRYPTOR,'r'^CRYPTOR,'5'^CRYPTOR,'*'^CRYPTOR,'U'^CRYPTOR,'K'^CRYPTOR,'*'^CRYPTOR,'3'^CRYPTOR,'7'^CRYPTOR,'!'^CRYPTOR,'1'^CRYPTOR,'O'^CRYPTOR,'j'^CRYPTOR,'6'^CRYPTOR,'0'^CRYPTOR,'|'^CRYPTOR,'*'^CRYPTOR,'0'^CRYPTOR,'M'^CRYPTOR,'0'^CRYPTOR,'D'^CRYPTOR,'4'^CRYPTOR,'+'^CRYPTOR,'x'^CRYPTOR,'S'^CRYPTOR,'o'^CRYPTOR,'d'^CRYPTOR,'m'^CRYPTOR,'R'^CRYPTOR,'Q'^CRYPTOR,'x'^CRYPTOR,'a'^CRYPTOR,'L'^CRYPTOR,'p'^CRYPTOR,'L'^CRYPTOR,'O'^CRYPTOR,'d'^CRYPTOR,'D'^CRYPTOR,'M'^CRYPTOR,'S'^CRYPTOR,'d'^CRYPTOR,'p'^CRYPTOR,'t'^CRYPTOR,'E'^CRYPTOR,'z'^CRYPTOR,'e'^CRYPTOR,'D'^CRYPTOR,'i'^CRYPTOR,'W'^CRYPTOR,'W'^CRYPTOR,'G'^CRYPTOR,'o'^CRYPTOR,'w'^CRYPTOR,'D'^CRYPTOR,'X'^CRYPTOR,'C'^CRYPTOR,'u'^CRYPTOR,'I'^CRYPTOR,'j'^CRYPTOR,'H'^CRYPTOR,'S'^CRYPTOR,'S'^CRYPTOR,'r'^CRYPTOR,'d'^CRYPTOR,'w'^CRYPTOR,'U'^CRYPTOR,'e'^CRYPTOR,'e'^CRYPTOR,'s'^CRYPTOR,'G'^CRYPTOR,'y'^CRYPTOR,'s'^CRYPTOR,'Y'^CRYPTOR,'G'^CRYPTOR,'s'^CRYPTOR,'F'^CRYPTOR,'u'^CRYPTOR,'a'^CRYPTOR,'j'^CRYPTOR,'G'^CRYPTOR,'k'^CRYPTOR,'b'^CRYPTOR,'h'^CRYPTOR,'f'^CRYPTOR,'J'^CRYPTOR,'n'^CRYPTOR,'a'^CRYPTOR,'u'^CRYPTOR,'F'^CRYPTOR,'T'^CRYPTOR,'X'^CRYPTOR,'M'^CRYPTOR,'f'^CRYPTOR,'u'^CRYPTOR,'Y'^CRYPTOR,'z'^CRYPTOR,'v'^CRYPTOR,'B'^CRYPTOR,'P'^CRYPTOR,'t'^CRYPTOR,'Y'^CRYPTOR,'q'^CRYPTOR,'W'^CRYPTOR,'M'^CRYPTOR,'A'^CRYPTOR,'u'^CRYPTOR,'V'^CRYPTOR,'U'^CRYPTOR,'C'^CRYPTOR,'j'^CRYPTOR,'A'^CRYPTOR,'S'^CRYPTOR,'m'^CRYPTOR,'z'^CRYPTOR,'g'^CRYPTOR,'A'^CRYPTOR,'U'^CRYPTOR,'Y'^CRYPTOR,'w'^CRYPTOR,'e'^CRYPTOR,'C'^CRYPTOR,'F'^CRYPTOR,'v'^CRYPTOR,'n'^CRYPTOR,'D'^CRYPTOR,'M'^CRYPTOR,'x'^CRYPTOR,'q'^CRYPTOR,'L'^CRYPTOR,'r'^CRYPTOR,'t'^CRYPTOR,'R'^CRYPTOR,'B'^CRYPTOR,'s'^CRYPTOR,'b'^CRYPTOR,'N'^CRYPTOR,'J'^CRYPTOR,'l'^CRYPTOR,'s'^CRYPTOR,'e'^CRYPTOR,'l'^CRYPTOR,'x'^CRYPTOR,'N'^CRYPTOR,'E'^CRYPTOR,'f'^CRYPTOR,'A'^CRYPTOR,'f'^CRYPTOR,'n'^CRYPTOR,'T'^CRYPTOR,'w'^CRYPTOR,'Q'^CRYPTOR,'E'^CRYPTOR,'p'^CRYPTOR,'V'^CRYPTOR,'G'^CRYPTOR,'A'^CRYPTOR,'V'^CRYPTOR,'N'^CRYPTOR,'k'^CRYPTOR,'y'^CRYPTOR,'c'^CRYPTOR,'X'^CRYPTOR,'F'^CRYPTOR,'B'^CRYPTOR,'C'^CRYPTOR,'Z'^CRYPTOR,'t'^CRYPTOR,'B'^CRYPTOR,'p'^CRYPTOR,'P'^CRYPTOR,'g'^CRYPTOR,'s'^CRYPTOR,'t'^CRYPTOR,'N'^CRYPTOR,'m'^CRYPTOR,'K'^CRYPTOR,'h'^CRYPTOR,'h'^CRYPTOR,'l'^CRYPTOR,'U'^CRYPTOR,'Q'^CRYPTOR,'E'^CRYPTOR,'D'^CRYPTOR,'c'^CRYPTOR,'U'^CRYPTOR,'Q'^CRYPTOR,'w'^CRYPTOR,'J'^CRYPTOR,'D'^CRYPTOR,'m'^CRYPTOR,'s'^CRYPTOR,'o'^CRYPTOR,'K'^CRYPTOR,'N'^CRYPTOR,'B'^CRYPTOR,'v'^CRYPTOR,'f'^CRYPTOR,'F'^CRYPTOR,'G'^CRYPTOR,'L'^CRYPTOR,'o'^CRYPTOR,'H'^CRYPTOR,'B'^CRYPTOR,'y'^CRYPTOR,'S'^CRYPTOR,'Y'^CRYPTOR,'I'^CRYPTOR,'R'^CRYPTOR,'A'^CRYPTOR,'o'^CRYPTOR,'q'^CRYPTOR,'g'^CRYPTOR,'b'^CRYPTOR,'x'^CRYPTOR,'k'^CRYPTOR,'z'^CRYPTOR,'i'^CRYPTOR,'J'^CRYPTOR,'Z'^CRYPTOR,'q'^CRYPTOR,'E'^CRYPTOR,'m'^CRYPTOR,'z'^CRYPTOR,'z'^CRYPTOR,'k'^CRYPTOR,'T'^CRYPTOR,'K'^CRYPTOR,'T'^CRYPTOR,'c'^CRYPTOR,'L'^CRYPTOR,'Q'^CRYPTOR,'J'^CRYPTOR,'t'^CRYPTOR,'I'^CRYPTOR,'m'^CRYPTOR,'L'^CRYPTOR,'f'^CRYPTOR,'v'^CRYPTOR,'g'^CRYPTOR,'q'^CRYPTOR,'Z'^CRYPTOR,'J'^CRYPTOR,'w'^CRYPTOR,'z'^CRYPTOR,'F'^CRYPTOR,'u'^CRYPTOR,'l'^CRYPTOR,'K'^CRYPTOR,'v'^CRYPTOR,'C'^CRYPTOR,'g'^CRYPTOR,'z'^CRYPTOR,'O'^CRYPTOR,'D'^CRYPTOR,'F'^CRYPTOR,'V'^CRYPTOR,'R'^CRYPTOR,'k'^CRYPTOR,'B'^CRYPTOR,'G'^CRYPTOR,'B'^CRYPTOR,'f'^CRYPTOR,'F'^CRYPTOR,'i'^CRYPTOR,'k'^CRYPTOR,'w'^CRYPTOR,'B'^CRYPTOR,'r'^CRYPTOR,'y'^CRYPTOR,'Z'^CRYPTOR,'J'^CRYPTOR,'V'^CRYPTOR,'D'^CRYPTOR,'m'^CRYPTOR,'r'^CRYPTOR,'a'^CRYPTOR,'N'^CRYPTOR,'t'^CRYPTOR,'q'^CRYPTOR,'X'^CRYPTOR };
	unsigned int mKey10[MAX_CHARKEY_LENGTH] = { ':'^CRYPTOR,'9'^CRYPTOR,'V'^CRYPTOR,'t'^CRYPTOR,'1'^CRYPTOR,'u'^CRYPTOR,'B'^CRYPTOR,'H'^CRYPTOR,'5'^CRYPTOR,'w'^CRYPTOR,'e'^CRYPTOR,'.'^CRYPTOR,'7'^CRYPTOR,'5'^CRYPTOR,'L'^CRYPTOR,'2'^CRYPTOR,'W'^CRYPTOR,'4'^CRYPTOR,'V'^CRYPTOR,'f'^CRYPTOR,'G'^CRYPTOR,'v'^CRYPTOR,'a'^CRYPTOR,'5'^CRYPTOR,'0'^CRYPTOR,'u'^CRYPTOR,'0'^CRYPTOR,'l'^CRYPTOR,'p'^CRYPTOR,'0'^CRYPTOR,'t'^CRYPTOR,'8'^CRYPTOR,'|'^CRYPTOR,'D'^CRYPTOR,'3'^CRYPTOR,'C'^CRYPTOR,'Y'^CRYPTOR,'9'^CRYPTOR,'d'^CRYPTOR,'5'^CRYPTOR,'D'^CRYPTOR,'9'^CRYPTOR,'z'^CRYPTOR,'3'^CRYPTOR,'v'^CRYPTOR,'8'^CRYPTOR,'d'^CRYPTOR,'s'^CRYPTOR,'5'^CRYPTOR,'5'^CRYPTOR,'1'^CRYPTOR,'Y'^CRYPTOR,'v'^CRYPTOR,'3'^CRYPTOR,'3'^CRYPTOR,'9'^CRYPTOR,'A'^CRYPTOR,'2'^CRYPTOR,'6'^CRYPTOR,'z'^CRYPTOR,'2'^CRYPTOR,'B'^CRYPTOR,'I'^CRYPTOR,'V'^CRYPTOR,'4'^CRYPTOR,'K'^CRYPTOR,'e'^CRYPTOR,'V'^CRYPTOR,'5'^CRYPTOR,'1'^CRYPTOR,'7'^CRYPTOR,'9'^CRYPTOR,'L'^CRYPTOR,'g'^CRYPTOR,'L'^CRYPTOR,'9'^CRYPTOR,'5'^CRYPTOR,'I'^CRYPTOR,'Q'^CRYPTOR,'%'^CRYPTOR,'5'^CRYPTOR,'0'^CRYPTOR,'4'^CRYPTOR,'X'^CRYPTOR,'g'^CRYPTOR,'9'^CRYPTOR,'L'^CRYPTOR,'o'^CRYPTOR,'9'^CRYPTOR,'9'^CRYPTOR,'9'^CRYPTOR,'8'^CRYPTOR,'7'^CRYPTOR,'Y'^CRYPTOR,'7'^CRYPTOR,'%'^CRYPTOR,'R'^CRYPTOR,'2'^CRYPTOR,'a'^CRYPTOR,'l'^CRYPTOR,'b'^CRYPTOR,'3'^CRYPTOR,'+'^CRYPTOR,'X'^CRYPTOR,'5'^CRYPTOR,'_'^CRYPTOR,'8'^CRYPTOR,'H'^CRYPTOR,'8'^CRYPTOR,'k'^CRYPTOR,'F'^CRYPTOR,'8'^CRYPTOR,'^'^CRYPTOR,'6'^CRYPTOR,'3'^CRYPTOR,'-'^CRYPTOR,'6'^CRYPTOR,'0'^CRYPTOR,'!'^CRYPTOR,'3'^CRYPTOR,'8'^CRYPTOR,'-'^CRYPTOR,'+'^CRYPTOR,'2'^CRYPTOR,'n'^CRYPTOR,'6'^CRYPTOR,'4'^CRYPTOR,'9'^CRYPTOR,'3'^CRYPTOR,'N'^CRYPTOR,'4'^CRYPTOR,'T'^CRYPTOR,'v'^CRYPTOR,'6'^CRYPTOR,'k'^CRYPTOR,'l'^CRYPTOR,'M'^CRYPTOR,'k'^CRYPTOR,'9'^CRYPTOR,'w'^CRYPTOR,'e'^CRYPTOR,'g'^CRYPTOR,'E'^CRYPTOR,'5'^CRYPTOR,'C'^CRYPTOR,'0'^CRYPTOR,'7'^CRYPTOR,'9'^CRYPTOR,'h'^CRYPTOR,'2'^CRYPTOR,'F'^CRYPTOR,'5'^CRYPTOR,'6'^CRYPTOR,'~'^CRYPTOR,'7'^CRYPTOR,'3'^CRYPTOR,'x'^CRYPTOR,'1'^CRYPTOR,'K'^CRYPTOR,'_'^CRYPTOR,'0'^CRYPTOR,'j'^CRYPTOR,'F'^CRYPTOR,'W'^CRYPTOR,'r'^CRYPTOR,'6'^CRYPTOR,'H'^CRYPTOR,'4'^CRYPTOR,'j'^CRYPTOR,'6'^CRYPTOR,'K'^CRYPTOR,'J'^CRYPTOR,'5'^CRYPTOR,'P'^CRYPTOR,'2'^CRYPTOR,'F'^CRYPTOR,'9'^CRYPTOR,'e'^CRYPTOR,'3'^CRYPTOR,'P'^CRYPTOR,'5'^CRYPTOR,'n'^CRYPTOR,'+'^CRYPTOR,'9'^CRYPTOR,'3'^CRYPTOR,'2'^CRYPTOR,'8'^CRYPTOR,'z'^CRYPTOR,'-'^CRYPTOR,'%'^CRYPTOR,'s'^CRYPTOR,'m'^CRYPTOR,'C'^CRYPTOR,'1'^CRYPTOR,'o'^CRYPTOR,'+'^CRYPTOR,'d'^CRYPTOR,'1'^CRYPTOR,'5'^CRYPTOR,'K'^CRYPTOR,'0'^CRYPTOR,'5'^CRYPTOR,';'^CRYPTOR,'!'^CRYPTOR,'A'^CRYPTOR,'+'^CRYPTOR,'0'^CRYPTOR,'0'^CRYPTOR,'8'^CRYPTOR,'0'^CRYPTOR,'W'^CRYPTOR,'L'^CRYPTOR,'O'^CRYPTOR,'5'^CRYPTOR,'X'^CRYPTOR,'4'^CRYPTOR,'1'^CRYPTOR,'3'^CRYPTOR,'n'^CRYPTOR,'5'^CRYPTOR,'.'^CRYPTOR,'C'^CRYPTOR,'q'^CRYPTOR,'1'^CRYPTOR,'w'^CRYPTOR,'4'^CRYPTOR,'Q'^CRYPTOR,'2'^CRYPTOR,'1'^CRYPTOR,'W'^CRYPTOR,'9'^CRYPTOR,'c'^CRYPTOR,'O'^CRYPTOR,'O'^CRYPTOR,'j'^CRYPTOR,'U'^CRYPTOR,'0'^CRYPTOR,'1'^CRYPTOR,'Z'^CRYPTOR,'3'^CRYPTOR,'6'^CRYPTOR,'O'^CRYPTOR,'%'^CRYPTOR,'a'^CRYPTOR,'9'^CRYPTOR,'6'^CRYPTOR,'7'^CRYPTOR,'a'^CRYPTOR,'C'^CRYPTOR,'1'^CRYPTOR,'c'^CRYPTOR,'t'^CRYPTOR,'v'^CRYPTOR,'2'^CRYPTOR,'g'^CRYPTOR,'k'^CRYPTOR,'U'^CRYPTOR,'R'^CRYPTOR,'J'^CRYPTOR,'b'^CRYPTOR,'S'^CRYPTOR,'n'^CRYPTOR,'C'^CRYPTOR,'g'^CRYPTOR,'A'^CRYPTOR,'U'^CRYPTOR,'q'^CRYPTOR,'E'^CRYPTOR,'P'^CRYPTOR,'K'^CRYPTOR,'i'^CRYPTOR,'C'^CRYPTOR,'O'^CRYPTOR,'G'^CRYPTOR,'y'^CRYPTOR,'K'^CRYPTOR,'h'^CRYPTOR,'p'^CRYPTOR,'c'^CRYPTOR,'n'^CRYPTOR,'Z'^CRYPTOR,'j'^CRYPTOR,'n'^CRYPTOR,'w'^CRYPTOR,'C'^CRYPTOR,'M'^CRYPTOR,'O'^CRYPTOR,'G'^CRYPTOR,'R'^CRYPTOR,'m'^CRYPTOR,'W'^CRYPTOR,'z'^CRYPTOR,'v'^CRYPTOR,'D'^CRYPTOR,'e'^CRYPTOR,'I'^CRYPTOR,'P'^CRYPTOR,'f'^CRYPTOR,'H'^CRYPTOR,'c'^CRYPTOR,'C'^CRYPTOR,'M'^CRYPTOR,'H'^CRYPTOR,'j'^CRYPTOR,'C'^CRYPTOR,'L'^CRYPTOR,'j'^CRYPTOR,'V'^CRYPTOR,'S'^CRYPTOR,'b'^CRYPTOR,'v'^CRYPTOR,'M'^CRYPTOR,'S'^CRYPTOR,'C'^CRYPTOR,'r'^CRYPTOR,'E'^CRYPTOR,'B'^CRYPTOR,'O'^CRYPTOR,'L'^CRYPTOR,'n'^CRYPTOR,'G'^CRYPTOR,'W'^CRYPTOR,'O'^CRYPTOR,'z'^CRYPTOR,'N'^CRYPTOR,'B'^CRYPTOR,'T'^CRYPTOR,'Z'^CRYPTOR,'q'^CRYPTOR,'A'^CRYPTOR,'R'^CRYPTOR,'K'^CRYPTOR,'z'^CRYPTOR,'D'^CRYPTOR,'M'^CRYPTOR,'t'^CRYPTOR,'x'^CRYPTOR,'H'^CRYPTOR,'F'^CRYPTOR,'m'^CRYPTOR,'S'^CRYPTOR,'b'^CRYPTOR,'j'^CRYPTOR,'z'^CRYPTOR,'a'^CRYPTOR,'L'^CRYPTOR,'X'^CRYPTOR,'I'^CRYPTOR,'R'^CRYPTOR,'q'^CRYPTOR,'R'^CRYPTOR,'h'^CRYPTOR,'s'^CRYPTOR,'v'^CRYPTOR,'k'^CRYPTOR,'S'^CRYPTOR,'D'^CRYPTOR,'p'^CRYPTOR,'k'^CRYPTOR,'x'^CRYPTOR,'G'^CRYPTOR,'O'^CRYPTOR,'T'^CRYPTOR,'k'^CRYPTOR,'A'^CRYPTOR,'Z'^CRYPTOR,'D'^CRYPTOR,'w'^CRYPTOR,'P'^CRYPTOR,'W'^CRYPTOR,'k'^CRYPTOR,'e'^CRYPTOR,'m'^CRYPTOR,'d'^CRYPTOR,'p'^CRYPTOR,'q'^CRYPTOR,'G'^CRYPTOR,'n'^CRYPTOR,'r'^CRYPTOR,'l'^CRYPTOR,'c'^CRYPTOR,'G'^CRYPTOR,'I'^CRYPTOR,'L'^CRYPTOR,'J'^CRYPTOR,'b'^CRYPTOR,'Q'^CRYPTOR,'E'^CRYPTOR,'d'^CRYPTOR,'K'^CRYPTOR,'R'^CRYPTOR,'C'^CRYPTOR,'h'^CRYPTOR,'R'^CRYPTOR,'A'^CRYPTOR,'v'^CRYPTOR,'r'^CRYPTOR,'Y'^CRYPTOR,'V'^CRYPTOR,'J'^CRYPTOR,'F'^CRYPTOR,'O'^CRYPTOR,'s'^CRYPTOR,'G'^CRYPTOR,'s'^CRYPTOR,'E'^CRYPTOR,'n'^CRYPTOR,'t'^CRYPTOR,'x'^CRYPTOR,'G'^CRYPTOR,'T'^CRYPTOR,'S'^CRYPTOR,'k'^CRYPTOR,'E'^CRYPTOR,'F'^CRYPTOR,'W'^CRYPTOR,'R'^CRYPTOR,'a'^CRYPTOR,'F'^CRYPTOR,'A'^CRYPTOR,'s'^CRYPTOR,'H'^CRYPTOR,'m'^CRYPTOR,'V'^CRYPTOR,'E'^CRYPTOR,'u'^CRYPTOR,'d'^CRYPTOR,'n'^CRYPTOR,'h'^CRYPTOR,'k'^CRYPTOR,'L'^CRYPTOR,'m'^CRYPTOR,'Z'^CRYPTOR,'f'^CRYPTOR,'c'^CRYPTOR,'Q'^CRYPTOR,'b'^CRYPTOR,'S'^CRYPTOR,'W'^CRYPTOR,'l'^CRYPTOR,'I'^CRYPTOR,'g'^CRYPTOR,'O'^CRYPTOR,'g'^CRYPTOR,'D'^CRYPTOR,'M'^CRYPTOR,'g'^CRYPTOR,'L'^CRYPTOR,'X'^CRYPTOR,'o'^CRYPTOR,'u'^CRYPTOR,'f'^CRYPTOR,'S'^CRYPTOR,'v'^CRYPTOR,'H'^CRYPTOR,'l'^CRYPTOR,'p'^CRYPTOR,'t'^CRYPTOR,'N'^CRYPTOR,'L'^CRYPTOR,'n'^CRYPTOR,'q'^CRYPTOR,'n'^CRYPTOR,'R'^CRYPTOR,'S'^CRYPTOR,'U'^CRYPTOR,'Z'^CRYPTOR,'a'^CRYPTOR,'J'^CRYPTOR,'h'^CRYPTOR,'N'^CRYPTOR,'j'^CRYPTOR,'g'^CRYPTOR,'Q'^CRYPTOR,'v'^CRYPTOR,'q'^CRYPTOR,'V'^CRYPTOR,'H'^CRYPTOR,'H'^CRYPTOR,'Q'^CRYPTOR,'W'^CRYPTOR,'h'^CRYPTOR,'x'^CRYPTOR,'T'^CRYPTOR,'R'^CRYPTOR,'j'^CRYPTOR,'v'^CRYPTOR,'q'^CRYPTOR,'j'^CRYPTOR,'q'^CRYPTOR,'p'^CRYPTOR,'M'^CRYPTOR,'R'^CRYPTOR,'M'^CRYPTOR,'r'^CRYPTOR,'O'^CRYPTOR,'s'^CRYPTOR,'z'^CRYPTOR,'o'^CRYPTOR,'G'^CRYPTOR,'K'^CRYPTOR,'Q'^CRYPTOR,'t'^CRYPTOR,'D'^CRYPTOR,'w'^CRYPTOR,'c'^CRYPTOR,'U'^CRYPTOR,'g'^CRYPTOR,'H'^CRYPTOR,'v'^CRYPTOR,'D'^CRYPTOR,'q'^CRYPTOR };

	DWORD key = 20040308;

	for(unsigned int i=0;i<=MAX_KEY_LENGTH;i++)
	{	mKey1[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey2[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey3[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey4[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey5[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey6[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey7[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey8[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey9[i] ^= key;	}
	for(unsigned int i=0;i<MAX_KEY_LENGTH;i++)
	{	mKey10[i] ^= key;	}

	memset(&m_Header,0,sizeof(m_Header));
	m_Header.dwDataSize = 42949672;
	DWORD tzV = 3464731138;
	m_Header.dwType = rand()%(m_Header.dwDataSize^=key) + 1;
	DWORD tmpV = tzV*(m_Header.dwDataSize^=key);
	m_Header.dwVersion = (tmpV ^= key)*key;
	m_Header.dwFileItemNum = m_dwFileItemNum;
	//Keys
	
	m_Header.Key1 = (DWORD)mKey1;
	m_Header.Key2 = (DWORD)mKey2;
	m_Header.Key3 = (DWORD)mKey3;
	m_Header.Key4 = (DWORD)mKey4;
	m_Header.Key5 = (DWORD)mKey5;
	m_Header.Key6 = (DWORD)mKey6;
	m_Header.Key7 = (DWORD)mKey7;
	m_Header.Key8 = (DWORD)mKey8;
	m_Header.Key9 = (DWORD)mKey9;
	m_Header.Key10 = (DWORD)mKey10;

/*
	PACK_FILE_HEADER	fileHeader;
	memset(&fileHeader,0,sizeof(fileHeader));
	fileHeader.dwVersion = CURRENT_VERSION;
	fileHeader.dwFileItemNum = m_dwFileItemNum;
*/
	DWORD	massByte = sizeof(PACK_FILE_HEADER);
	DWORD	dwWriteBytes,dwReadBytes;
	//WriteFile(hWriteFile,&fileHeader,sizeof(PACK_FILE_HEADER),&dwWriteBytes,NULL);
	WriteFile(hWriteFile,&m_Header,massByte,&dwWriteBytes,NULL);

	DWORD	dwCount;
	dwCount = 0;
	FSFILE_DESC*	pDesc;

	pDesc = m_pfsHead;
	FSFILE_HEADER*	pWriteHeader;

	DWORD			dwSuccessedFileItemNum;


	dwSuccessedFileItemNum = 0;
	while (pDesc)
	{
		if (pDesc->bSourceFromPackFile)
		{
			// 이 경우는 워크 파일에 있는 데이타를 그대로 긁어다 복사하면 된다.
			char*	pBuffer = new char[pDesc->dwTotalSize];
			
			// 읽어서..
			SetFilePointer(m_hOriginalFile,pDesc->dwPositionInPackFile,NULL,FILE_BEGIN);
			ReadFile(m_hOriginalFile,pBuffer,pDesc->dwTotalSize,&dwReadBytes,NULL);

			// 세이브용 파일의 현재 위치를 얻는다.
			DWORD dwWriteBytes,dwCurrentFilePosition; 
			dwCurrentFilePosition = SetFilePointer(hWriteFile,0,NULL,FILE_CURRENT);


			// 써넣는다
			pWriteHeader = (FSFILE_HEADER*)pBuffer;
			pWriteHeader->dwFileDataOffset = dwCurrentFilePosition;

			WriteFile(hWriteFile,pBuffer,pDesc->dwTotalSize,&dwWriteBytes,NULL);
			delete [] pBuffer;
			dwSuccessedFileItemNum++;

		}
		else
		{
			
			HANDLE	hSrcFile = CreateFile(pDesc->pszFileName,GENERIC_READ,0,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
			if (INVALID_HANDLE_VALUE == hSrcFile)
			{
				// 파일을 추가하지 못했음을 알리는 메시지 박스를 띄우고..
				goto lb_skip;
			}
			DWORD	dwRealFileSize;
			dwRealFileSize = GetFileSize(hSrcFile,NULL);
			pDesc->dwRealFileSize = dwRealFileSize;

			pDesc->dwFileNameLen = GetSearchFileName(pDesc->pszFileName,pDesc->pszFileName);
			pDesc->dwTotalSize = FSFILE_HEADER_SIZE + dwRealFileSize + pDesc->dwFileNameLen + 1;
			char* pszFileName;
			pszFileName = (char*)VBHGetKeyPtr(pDesc->pHashHandle);

#ifdef _DEBUG
			
			if (memcmp(pszFileName,pDesc->pszFileName,pDesc->dwFileNameLen))
				__asm int 3
#endif
			

			pDesc->bSourceFromPackFile = TRUE;

			// 세이브용 파일의 현재 위치를 얻는다.
			DWORD dwWriteBytes,dwCurrentFilePosition; 
			dwCurrentFilePosition = SetFilePointer(hWriteFile,0,NULL,FILE_CURRENT);

			pDesc->dwPositionInPackFile = dwCurrentFilePosition;
						

			char*	pBuffer = new char[pDesc->dwTotalSize];
			memset(pBuffer,0,pDesc->dwTotalSize);

			// 써넣는다
			pWriteHeader = (FSFILE_HEADER*)pBuffer;
			pWriteHeader->dwFileDataOffset = dwCurrentFilePosition;
			pWriteHeader->dwFileNameLen = pDesc->dwFileNameLen;
			
			pWriteHeader->dwRealFileSize = dwRealFileSize;
			pWriteHeader->dwTotalSize = pDesc->dwTotalSize;
			memcpy(pWriteHeader->szFileName,pszFileName,pDesc->dwFileNameLen);

			ReadFile(hSrcFile,pWriteHeader->szFileName+pDesc->dwFileNameLen+1,dwRealFileSize,&dwReadBytes,NULL);
			_ASSERT(_CrtCheckMemory());

			WriteFile(hWriteFile,pBuffer,pDesc->dwTotalSize,&dwWriteBytes,NULL);
			delete [] pBuffer;
			dwSuccessedFileItemNum++;
			CloseHandle(hSrcFile);
		}
		
lb_skip:
		if (pCallBackFunc)
		{
			pCallBackFunc(dwCount,m_dwFileItemNum,NULL);
		}
		pDesc = pDesc->pNextInPackFile;
		dwCount++;
	}

	// 성공한 파일 개수를 다시 써넣는다
	SetFilePointer(hWriteFile,0,NULL,FILE_BEGIN);
	m_Header.dwFileItemNum = dwSuccessedFileItemNum;
	WriteFile(hWriteFile,&m_Header,sizeof(PACK_FILE_HEADER),&dwWriteBytes,NULL);

	CloseHandle(m_hOriginalFile);
	m_hOriginalFile = INVALID_HANDLE_VALUE;
	CloseHandle(hWriteFile);

	DeleteFile(m_szFileName);
	MoveFile(szWriteFileName,m_szFileName);

	Cleanup();
	char	szFileName[_MAX_PATH];
	memset(szFileName,0,sizeof(szFileName));
	memcpy(szFileName,m_szFileName,m_dwFileNameLen);
	Initialize(m_pStorage,m_pPackFileNameHash,szFileName);

	bResult = TRUE;
	
lb_return:
	return bResult;
}

DWORD CPackFile::ExtractAllFiles()
{
	DWORD	dwCount = 0;
	FSFILE_DESC*	pDesc = m_pfsHead;
	while (pDesc)
	{
		
		if (ExtractFile(pDesc))
			dwCount++;

		pDesc = pDesc->pNextInPackFile;
	}
	return dwCount;
}

BOOL CPackFile::ExtractFile(FSFILE_DESC* pfsDesc)
{
	BOOL	bResult = FALSE;
	if (!pfsDesc->bSourceFromPackFile)
	{
		__asm int 3
		goto lb_return;
	}


	DWORD	dwReadBytes;
	char*	pBuffer;
	pBuffer = new char[pfsDesc->dwTotalSize];
	
	// 위치 지정
	SetFilePointer(m_hOriginalFile,pfsDesc->dwPositionInPackFile,NULL,FILE_BEGIN);

	// 읽어서..
	ReadFile(m_hOriginalFile,pBuffer,pfsDesc->dwTotalSize,&dwReadBytes,NULL);

	FSFILE_HEADER*	pWriteHeader;
	pWriteHeader = (FSFILE_HEADER*)pBuffer;
	
	HANDLE	hWriteFile;
	DWORD	dwWriteBytes;

	hWriteFile = CreateFile(pWriteHeader->szFileName,GENERIC_WRITE,0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);
	WriteFile(hWriteFile,pWriteHeader->szFileName+pWriteHeader->dwFileNameLen+1,pWriteHeader->dwRealFileSize,&dwWriteBytes,NULL);
	
	delete [] pBuffer;

	CloseHandle(hWriteFile);


	bResult = TRUE;
lb_return:
	return bResult;
}


DWORD CPackFile::PFReadFile(char* pDestBuffer,FSFILE_DESC* pDesc,DWORD dwOffset,DWORD dwLen)
{

	DWORD	dwRealDataOffset,dwLastOffset,dwFileOffset;

	DWORD	dwReadBytes = 0;
	if (dwOffset >= pDesc->dwRealFileSize)
		goto lb_return;

	dwRealDataOffset = pDesc->dwPositionInPackFile + FSFILE_HEADER_SIZE + pDesc->dwFileNameLen + 1;
	dwLastOffset = dwRealDataOffset + pDesc->dwRealFileSize;
	dwFileOffset = dwRealDataOffset + dwOffset;
		
	SetFilePointer(m_hOriginalFile,dwFileOffset,NULL,FILE_BEGIN);


	if ( dwFileOffset+dwLen  > dwLastOffset)
		dwLen = dwLastOffset - dwFileOffset;
		
	ReadFile(m_hOriginalFile,pDestBuffer,dwLen,&dwReadBytes,NULL);

lb_return:
	return dwReadBytes;

}



void CPackFile::Cleanup()
{
	
	while(m_pfsHead)
	{
#ifdef _DEBUG
		if (m_pfsHead->pOwnerPackFile != this)
			__asm int 3
#endif

		m_pStorage->RemoveFileFromPackFile(m_pfsHead);
	}
	if (m_hOriginalFile != INVALID_HANDLE_VALUE)
	{
		CloseHandle(m_hOriginalFile);
		m_hOriginalFile = INVALID_HANDLE_VALUE;

	}

}

void CPackFile::GetInfo(FSPACK_FILE_INFO* pPackFileInfo)
{
	pPackFileInfo->dwVersion = m_dwCurrentVersion;
	pPackFileInfo->dwFileItemNum = m_dwFileItemNum;
	pPackFileInfo->dwFlag = 0;
	lstrcpy(pPackFileInfo->szFileName,m_szFileName);
	pPackFileInfo->dwFileNameLen = m_dwFileNameLen;
}
CPackFile::~CPackFile()
{
	Cleanup();

}

